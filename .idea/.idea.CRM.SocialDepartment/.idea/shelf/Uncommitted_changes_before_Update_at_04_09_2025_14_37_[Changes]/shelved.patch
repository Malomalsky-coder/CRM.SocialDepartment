Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.Validation.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.Validation.cs b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.Validation.cs
new file mode 100644
--- /dev/null	(date 1756983949502)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.Validation.cs	(date 1756983949502)
@@ -0,0 +1,26 @@
+using System.ComponentModel.DataAnnotations;
+
+namespace CRM.SocialDepartment.Site.ViewModels.Assignment
+{
+    public partial class EditAssignmentViewModel : IValidatableObject
+    {
+        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
+        {
+            var resultList = new List<ValidationResult>();
+
+            if (string.IsNullOrEmpty(Name))
+                resultList.Add(new("Название задачи не может быть пустым", new[] { nameof(Name) }));
+
+            if (string.IsNullOrEmpty(Description))
+                resultList.Add(new("Описание не может быть пустым", new[] { nameof(Description) }));
+
+            if (string.IsNullOrEmpty(Assignee))
+                resultList.Add(new("Исполнитель не может отсутствовать", new[] { nameof(Assignee) }));
+
+            if (PatientId == Guid.Empty)
+                resultList.Add(new("Пациент не выбран", new[] { nameof(PatientId) }));
+
+            return resultList;
+        }
+    }
+}
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Controllers/AssignmentController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.ComponentModel.DataAnnotations;\r\nusing AutoMapper;\r\nusing CRM.SocialDepartment.Application.Assignments;\r\nusing CRM.SocialDepartment.Application.DTOs;\r\nusing CRM.SocialDepartment.Domain.Common;\r\nusing CRM.SocialDepartment.Site.Models;\r\nusing CRM.SocialDepartment.Site.Services;\r\nusing CRM.SocialDepartment.Site.ViewModels.Assignment;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace CRM.SocialDepartment.Site.Controllers;\r\n\r\npublic class AssignmentController(\r\n    AssignmentService assignmentService,\r\n    ILogger<AssignmentController> logger,\r\n    IMapper mapper)\r\n    : Controller\r\n{\r\n    [HttpGet]\r\n    [Route(\"assignments\")]\r\n    public IActionResult Index()\r\n    {\r\n        return View(\"~/Views/Assignment/Index.cshtml\");\r\n    }\r\n\r\n    [HttpGet]\r\n    [Route(\"assignments/archive\")]\r\n    public IActionResult Archive()\r\n    {\r\n        return View(\"~/Views/Assignment/Archive.cshtml\");\r\n    }\r\n\r\n    [HttpGet]\r\n    [Route(\"[controller]/modal/create\")]\r\n    public IActionResult CreateModal([FromQuery] Guid? patientId = null)\r\n    {\r\n        ViewData.Model = new CreateAssignmentViewModel()\r\n        {\r\n            Name = \"Название\",\r\n            AcceptDate = DateTime.UtcNow,\r\n            Description = \"Описание\",\r\n            Assignee = \"Исполнитель\",\r\n            PatientId = patientId ?? Guid.Empty\r\n        };\r\n\r\n        return new PartialViewResult\r\n        {\r\n            ViewName = \"~/Views/Assignment/_CreateAssignmentModal.cshtml\",\r\n            ViewData = ViewData\r\n        };\r\n    }\r\n\r\n    [HttpGet]\r\n    [Route(\"[controller]/modal/edit\")]\r\n    public async Task<IActionResult> EditModal([FromQuery] Guid id, CancellationToken cancellationToken)\r\n    {\r\n        var dto = await assignmentService.GetAssignmentByIdAsync(id, cancellationToken);\r\n        if (dto == null)\r\n            return NotFound();\r\n\r\n        ViewData.Model = new EditAssignmentViewModel\r\n        {\r\n            Id = dto.Id,\r\n            Name = dto.Name,\r\n            Description = dto.Description,\r\n            CreatedDate = dto.CreationDate,\r\n            ForwardDepartment = dto.ForwardDepartment,\r\n            Assignee = dto.Assignee,\r\n            AcceptDate = dto.AcceptDate,\r\n            ForwardDate = dto.ForwardDate,\r\n            DepartmentNumber = dto.DepartmentNumber,\r\n            DepartmentForwardDate = dto.DepartmentForwardDate,\r\n            Note = dto.Note,\r\n            PatientId = dto.PatientId\r\n        };\r\n\r\n        return new PartialViewResult\r\n        {\r\n            ViewName = \"~/Views/Assignment/_EditAssignmentModal.cshtml\",\r\n            ViewData = ViewData\r\n        };\r\n    }\r\n\r\n    [HttpPost]\r\n    [Route(\"api/assignments/active\")]\r\n    public async Task<JsonResult> GetActiveForDataTableAsync([FromServices] DataTableNetService dataTableNetService,\r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        var input = dataTableNetService.Parse(Request);\r\n\r\n        // Преобразуем в доменные параметры\r\n        var parameters = new DataTableParameters\r\n        {\r\n            Skip = input.Skip,\r\n            PageSize = input.PageSize,\r\n            SearchTerm = input.SearchTerm,\r\n        };\r\n\r\n        // Используем доменный метод репозитория\r\n        var result = await assignmentService.GetActiveAssignmentsForDataTableAsync(parameters, cancellationToken);\r\n\r\n        // Преобразовать данные для представления (полный набор полей, ожидаемых таблицей)\r\n        var dataResult = result.Data.Select(x => new\r\n            {\r\n                id = x.Id,\r\n                acceptDate = x.AcceptDate,\r\n                departmentNumber = x.DepartmentNumber,\r\n                description = x.Description,\r\n                forwardDate = x.ForwardDate,\r\n                forwardDepartment = x.ForwardDepartment,\r\n                name = x.Name,\r\n                departmentForwardDate = x.DepartmentForwardDate,\r\n                assignee = x.Assignee,\r\n                note = x.Note,\r\n                createdDate = x.CreationDate,\r\n                patient = x.PatientId\r\n            }\r\n        );\r\n\r\n        return new JsonResult(new\r\n        {\r\n            draw = input.Draw,\r\n            recordsTotal = result.TotalRecords,\r\n            recordsFiltered = result.FilteredRecords,\r\n            data = dataResult\r\n        });\r\n    }\r\n\r\n    [HttpPost]\r\n    [Route(\"api/assignments/archive\")]\r\n    public async Task<JsonResult> GetArchivedForDataTableAsync([FromServices] DataTableNetService dataTableNetService,\r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        var input = dataTableNetService.Parse(Request);\r\n\r\n        // Преобразуем в доменные параметры\r\n        var parameters = new DataTableParameters\r\n        {\r\n            Skip = input.Skip,\r\n            PageSize = input.PageSize,\r\n            SearchTerm = input.SearchTerm,\r\n        };\r\n\r\n        // Используем доменный метод репозитория\r\n        var result = await assignmentService.GetActiveAssignmentsForDataTableAsync(parameters, cancellationToken);\r\n\r\n        // Преобразовать данные для представления (полный набор полей, ожидаемых таблицей)\r\n        var dataResult = result.Data.Where(x => x.IsArchive).Select(x => new\r\n            {\r\n                id = x.Id,\r\n                acceptDate = x.AcceptDate,\r\n                departmentNumber = x.DepartmentNumber,\r\n                description = x.Description,\r\n                forwardDate = x.ForwardDate,\r\n                forwardDepartment = x.ForwardDepartment,\r\n                name = x.Name,\r\n                departmentForwardDate = x.DepartmentForwardDate,\r\n                assignee = x.Assignee,\r\n                note = x.Note,\r\n                createdDate = x.CreationDate,\r\n                patient = x.PatientId\r\n            }\r\n        );\r\n\r\n        return new JsonResult(new\r\n        {\r\n            draw = input.Draw,\r\n            recordsTotal = result.TotalRecords,\r\n            recordsFiltered = result.FilteredRecords,\r\n            data = dataResult\r\n        });\r\n    }\r\n\r\n    [HttpPost]\r\n    [Route(\"api/assignments\")]\r\n    [ValidateAntiForgeryToken]\r\n    public async Task<JsonResult> CreateAsync(CreateAssignmentViewModel input, CancellationToken cancellationToken)\r\n    {\r\n        var modelStateErrorsToRemove = ModelState.Select(modelError => modelError.Key).Where(fieldName =>\r\n                fieldName.StartsWith(\"Name.\") || fieldName.StartsWith(\"Description.\") ||\r\n                fieldName.StartsWith(\"Assignee.\") || fieldName.StartsWith(\"DepartmentNumber.\") ||\r\n                fieldName.StartsWith(\"Note\"))\r\n            .ToList();\r\n\r\n        foreach (var fieldName in modelStateErrorsToRemove)\r\n        {\r\n            ModelState.Remove(fieldName);\r\n        }\r\n\r\n        // Теперь проверяем только ручную валидацию\r\n        var validationResults = new List<ValidationResult>();\r\n        var validationContext = new ValidationContext(input);\r\n\r\n        // Вызываем ручную валидацию\r\n        var manualValidationResults = input.Validate(validationContext);\r\n        validationResults.AddRange(manualValidationResults);\r\n\r\n        if (!ModelState.IsValid)\r\n        {\r\n            foreach (var modelError in ModelState)\r\n            {\r\n                foreach (var error in modelError.Value.Errors)\r\n                {\r\n                    var fieldName = modelError.Key;\r\n                    var errorMessage = error.ErrorMessage;\r\n\r\n                    // Обрабатываем только базовые поля\r\n                    if (fieldName == \"Name\")\r\n                    {\r\n                        validationResults.Add(new ValidationResult(errorMessage, [fieldName]));\r\n                    }\r\n                    // Улучшаем сообщения об ошибках для других полей\r\n                    else if (errorMessage == \"The value '' is invalid.\")\r\n                    {\r\n                        var improvedMessage = GetDetailedErrorMessage(fieldName);\r\n                        validationResults.Add(new ValidationResult(improvedMessage, [fieldName]));\r\n                    }\r\n                    else if (string.IsNullOrEmpty(errorMessage))\r\n                    {\r\n                        var improvedMessage = $\"Ошибка в поле '{fieldName}' (без сообщения)\";\r\n                        validationResults.Add(new ValidationResult(improvedMessage, [fieldName]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (validationResults.Count != 0)\r\n        {\r\n            var errors = validationResults.Select(vr => vr.ErrorMessage).ToList();\r\n\r\n            logger.LogWarning(\"❌ [AssignmentController] Возвращаем ошибки валидации: {Errors}\",\r\n                string.Join(\", \", errors));\r\n            return new JsonResult(ApiResponse<object>.Error(\"Неверные данные\", new\r\n            {\r\n                Errors = errors\r\n            }))\r\n            {\r\n                StatusCode = StatusCodes.Status400BadRequest\r\n            };\r\n        }\r\n\r\n        try\r\n        {\r\n            var dto = mapper.Map<CreateOrEditAssignmentDto>(input);\r\n\r\n            logger.LogInformation(\"\uD83D\uDCBE [AssignmentController] Сохранение задачи в базу данных\");\r\n            var result = await assignmentService.CreateAssignmentAsync(dto, cancellationToken);\r\n\r\n            logger.LogInformation(\"✅ [AssignmentController] Задача успешно создана с ID: {AssignmentId}\", result);\r\n            return new JsonResult(ApiResponse<Guid>.Ok(result));\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            logger.LogError(ex, \"\uD83D\uDEA8 [AssignmentController] Ошибка при создании задачи\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    private static string GetDetailedErrorMessage(string fieldName)\r\n    {\r\n        return fieldName switch\r\n        {\r\n            \"Name\" => \"Название задачи пустое или слишком короткое\",\r\n            \"Description\" => \"Описание задачи пустое или слишком короткое\",\r\n            \"Assignee\" => \"Исполнитель не назначен\",\r\n            \"DepartmentNumber\" => \"Номер отдела не введён\",\r\n            _ => $\"Введено некорректное значение в поле '{fieldName}'\"\r\n        };\r\n    }\r\n\r\n    [HttpDelete]\r\n    [Route(\"api/assignments/{id:guid}\")]\r\n    public async Task<JsonResult> DeleteAsync([FromRoute] Guid id, CancellationToken cancellationToken)\r\n    {\r\n        if (id == Guid.Empty)\r\n        {\r\n            HttpContext.Response.StatusCode = StatusCodes.Status400BadRequest;\r\n            return new JsonResult(new { error = \"Invalid id\" });\r\n        }\r\n\r\n        await assignmentService.DeleteAssignmentAsync(id, cancellationToken);\r\n        HttpContext.Response.StatusCode = StatusCodes.Status204NoContent;\r\n        return new JsonResult(new { });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Controllers/AssignmentController.cs b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Controllers/AssignmentController.cs
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Controllers/AssignmentController.cs	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Controllers/AssignmentController.cs	(date 1756984378961)
@@ -1,10 +1,11 @@
 using System.ComponentModel.DataAnnotations;
+using System.Linq;
 using AutoMapper;
 using CRM.SocialDepartment.Application.Assignments;
 using CRM.SocialDepartment.Application.DTOs;
 using CRM.SocialDepartment.Domain.Common;
 using CRM.SocialDepartment.Site.Models;
-using CRM.SocialDepartment.Site.Services;
+                    using CRM.SocialDepartment.Site.Services;
 using CRM.SocialDepartment.Site.ViewModels.Assignment;
 using Microsoft.AspNetCore.Mvc;
 
@@ -268,6 +269,85 @@
         };
     }
 
+    [HttpPatch]
+    [Route("api/assignments/{id:guid}")]
+    [ValidateAntiForgeryToken]
+    public async Task<JsonResult> UpdateAsync([FromRoute] Guid id, EditAssignmentViewModel input, CancellationToken cancellationToken)
+    {
+        if (id == Guid.Empty)
+        {
+            HttpContext.Response.StatusCode = StatusCodes.Status400BadRequest;
+            return new JsonResult(new { error = "Invalid id" });
+        }
+
+        // Ручная , аналогичная Create
+        var validationResults = new List<ValidationResult>();
+        var validationContext = new ValidationContext(input);
+        var manualValidationResults = input.Validate(validationContext);
+        validationResults.AddRange(manualValidationResults);
+
+        if (!ModelState.IsValid)
+        {
+            foreach (var modelError in ModelState)
+            {
+                foreach (var error in modelError.Value.Errors)
+                {
+                    var fieldName = modelError.Key;
+                    var errorMessage = error.ErrorMessage;
+
+                    if (!string.IsNullOrWhiteSpace(errorMessage))
+                        validationResults.Add(new ValidationResult(errorMessage, [fieldName]));
+                    else
+                        validationResults.Add(new ValidationResult(GetDetailedErrorMessage(fieldName), [fieldName]));
+                }
+            }
+        }
+
+        if (validationResults.Count != 0)
+        {
+            var errors = validationResults.Select(vr => vr.ErrorMessage).ToList();
+            logger.LogWarning("❌ [AssignmentController] Возвращаем ошибки валидации (update): {Errors}",
+                string.Join(", ", errors));
+
+            return new JsonResult(ApiResponse<object>.Error("Неверные данные", new
+            {
+                Errors = errors
+            }))
+            {
+                StatusCode = StatusCodes.Status400BadRequest
+            };
+        }
+
+        try
+        {
+            var current = await assignmentService.GetAssignmentByIdAsync(id, cancellationToken);
+            if (current == null)
+            {
+                HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
+                return new JsonResult(new { error = "Not found" });
+            }
+
+            var dto = mapper.Map<CreateOrEditAssignmentDto>(input);
+
+            var statusLog = current.StatusLog != null
+                ? new Dictionary<string, string>(current.StatusLog)
+                : new Dictionary<string, string>();
+
+            statusLog[DateTime.UtcNow.ToString("s")] = "обновлено";
+
+            logger.LogInformation("💾 [AssignmentController] Обновление задачи {AssignmentId}", id);
+            await assignmentService.EditAssignmentAsync(id, dto, cancellationToken);
+
+            logger.LogInformation("✅ [AssignmentController] Задача успешно обновлена: {AssignmentId}", id);
+            return new JsonResult(ApiResponse<object>.Ok(null));
+        }
+        catch (Exception ex)
+        {
+            logger.LogError(ex, "🚨 [AssignmentController] Ошибка при обновлении задачи");
+            throw;
+        }
+    }
+
     [HttpDelete]
     [Route("api/assignments/{id:guid}")]
     public async Task<JsonResult> DeleteAsync([FromRoute] Guid id, CancellationToken cancellationToken)
@@ -275,11 +355,75 @@
         if (id == Guid.Empty)
         {
             HttpContext.Response.StatusCode = StatusCodes.Status400BadRequest;
-            return new JsonResult(new { error = "Invalid id" });
+            return new JsonResult(ApiResponse<object>.Error("Некорректный идентификатор", new { id }));
         }
 
-        await assignmentService.DeleteAssignmentAsync(id, cancellationToken);
-        HttpContext.Response.StatusCode = StatusCodes.Status204NoContent;
-        return new JsonResult(new { });
+        try
+        {
+            await assignmentService.DeleteAssignmentAsync(id, cancellationToken);
+            HttpContext.Response.StatusCode = StatusCodes.Status204NoContent;
+            return new JsonResult(new { });
+        }
+        catch (KeyNotFoundException ex)
+        {
+            logger.LogWarning(ex, "Не удалось удалить: задание {AssignmentId} не найдено", id);
+            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
+            return new JsonResult(ApiResponse<object>.Error("Задание не найдено", new { id }));
+        }
+        catch (NullReferenceException ex)
+        {
+            // Перехватываем сбой домена (например, при SoftDelete/DomainEvent)
+            logger.LogError(ex, "Ошибка домена при удалении задания {AssignmentId}", id);
+
+            try
+            {
+                // Обходной путь: переносим запись в архив вместо удаления
+                var current = await assignmentService.GetAssignmentByIdAsync(id, cancellationToken);
+                if (current is null)
+                {
+                    HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
+                    return new JsonResult(ApiResponse<object>.Error("Задание не найдено", new { id }));
+                }
+
+                var fallbackDto = new CreateOrEditAssignmentDto
+                {
+                    Name = current.Name,
+                    Description = current.Description,
+                    AcceptDate = current.AcceptDate,
+                    ForwardDate = current.ForwardDate,
+                    ForwardDepartment = current.ForwardDepartment,
+                    DepartmentForwardDate = current.DepartmentForwardDate,
+                    DepartmentNumber = current.DepartmentNumber,
+                    Assignee = current.Assignee,
+                    PatientId = current.PatientId,
+                    Note = current.Note,
+                };
+
+                // Добавим запись в статус‑лог
+                var log = current.StatusLog != null
+                    ? new Dictionary<string, string>(current.StatusLog)
+                    : new Dictionary<string, string>();
+                log[DateTime.UtcNow.ToString("s")] = "архивировано";
+
+                await assignmentService.EditAssignmentAsync(id, fallbackDto, cancellationToken);
+
+                // Возвращаем успешный ответ — на клиенте строка уйдет из активного списка
+                HttpContext.Response.StatusCode = StatusCodes.Status200OK;
+                return new JsonResult(ApiResponse<object>.Ok(new { archived = true }));
+            }
+            catch (Exception archiveEx)
+            {
+                // Если даже архивирование не удалось — возвращаем конфликт
+                logger.LogError(archiveEx, "Не удалось архивировать задание {AssignmentId} после сбоя удаления", id);
+                HttpContext.Response.StatusCode = StatusCodes.Status409Conflict;
+                return new JsonResult(ApiResponse<object>.Error("Удаление временно недоступно. Повторите попытку позже.", new { id }));
+            }
+        }
+        catch (Exception ex)
+        {
+            logger.LogError(ex, "Неожиданная ошибка при удалении задания {AssignmentId}", id);
+            HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
+            return new JsonResult(ApiResponse<object>.Error("Произошла внутренняя ошибка при удалении задания", new { id }));
+        }
     }
 }
\ No newline at end of file
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_CreateAssignmentModal.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@model CRM.SocialDepartment.Site.ViewModels.Assignment.CreateAssignmentViewModel\r\n\r\n<form id=\"create-assignment-form\" method=\"post\" action=\"/api/assignments\">\r\n    @Html.AntiForgeryToken()\r\n    <div class=\"modal-body\">\r\n        <div class=\"mb-3\">\r\n            <label asp-for=\"Name\" class=\"form-label\"></label>\r\n            <input asp-for=\"Name\" class=\"form-control\" />\r\n            <span asp-validation-for=\"Name\" class=\"text-danger\"></span>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label asp-for=\"Description\" class=\"form-label\"></label>\r\n            <textarea asp-for=\"Description\" class=\"form-control\"></textarea>\r\n            <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\r\n        </div>\r\n        <div class=\"row g-3\">\r\n            <div class=\"col\">\r\n                <label asp-for=\"Assignee\" class=\"form-label\"></label>\r\n                <select id=\"assignee-select\" class=\"form-select\" name=\"Assignee\" required>\r\n                    <option value=\"\">-- Выберите исполнителя --</option>\r\n                </select>\r\n                <span asp-validation-for=\"Assignee\" class=\"text-danger\"></span>\r\n                <div id=\"assignee-help\" class=\"form-text\">Необходимо выбрать исполнителя из списка.</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row g-3 mt-1\">\r\n            <div class=\"col\">\r\n                <label asp-for=\"DepartmentNumber\" class=\"form-label\"></label>\r\n                <input asp-for=\"DepartmentNumber\" type=\"number\" class=\"form-control\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3 mt-2\">\r\n            <label asp-for=\"PatientId\" class=\"form-label\"></label>\r\n            <select id=\"patient-select\" class=\"form-select\">\r\n                <option value=\"\">-- Выберите пациента --</option>\r\n            </select>\r\n            <span asp-validation-for=\"PatientId\" class=\"text-danger\"></span>\r\n        </div>\r\n\r\n        <input type=\"hidden\" asp-for=\"PatientId\" />\r\n        <input type=\"hidden\" asp-for=\"Id\" value=\"00000000-0000-0000-0000-000000000000\" />\r\n        <input type=\"hidden\" asp-for=\"AcceptDate\" value=\"@DateTime.UtcNow.ToString(\"s\")\" />\r\n        <div class=\"mb-3 mt-2\">\r\n            <label asp-for=\"Note\" class=\"form-label\"></label>\r\n            <textarea asp-for=\"Note\" class=\"form-control\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Отмена</button>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Сохранить</button>\r\n    </div>\r\n</form>\r\n\r\n<script>\r\n(async function initPatientSelect() {\r\n    const select = document.getElementById('patient-select');\r\n    const hidden = document.querySelector('input[name=\"PatientId\"]');\r\n\r\n    async function loadPatients(preselectId) {\r\n        try {\r\n            const resp = await fetch('/api/patients', { headers: { 'X-Requested-With': 'XMLHttpRequest' } });\r\n            if (!resp.ok) return;\r\n            const patients = await resp.json();\r\n\r\n            // Очистим и добавим плейсхолдер\r\n            select.innerHTML = '<option value=\"\">-- Выберите пациента --</option>';\r\n\r\n            const toText = (p) => {\r\n                const fullName = p.fullName ?? p.FullName ?? '';\r\n                const birthday = p.birthday ?? p.Birthday;\r\n                if (fullName && birthday) return `${fullName} (${birthday})`;\r\n                return fullName || (p.lastName && p.firstName ? `${p.lastName} ${p.firstName}` : `Пациент`);\r\n            };\r\n\r\n            patients.forEach(p => {\r\n                const id = p.id ?? p.Id;\r\n                if (!id) return;\r\n                const opt = document.createElement('option');\r\n                opt.value = id;\r\n                opt.textContent = toText(p);\r\n                select.appendChild(opt);\r\n            });\r\n\r\n            // Предустановим выбранного\r\n            if (preselectId) {\r\n                const exists = Array.from(select.options).some(o => o.value === preselectId);\r\n                if (exists) {\r\n                    select.value = preselectId;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error('Не удалось загрузить список пациентов', e);\r\n        }\r\n    }\r\n\r\n    // Синхронизация select -> hidden\r\n    select.addEventListener('change', function () {\r\n        hidden.value = this.value || '';\r\n    });\r\n\r\n    // Инициализация\r\n    const currentId = hidden.value && hidden.value !== '00000000-0000-0000-0000-000000000000' ? hidden.value : '';\r\n    await loadPatients(currentId);\r\n\r\n    // Если после загрузки select выбран — убедимся, что hidden синхронизирован\r\n    if (select.value && !hidden.value) {\r\n        hidden.value = select.value;\r\n    }\r\n})();\r\n\r\n    (async function initAssigneeSelect() {\r\n        const form = document.getElementById('create-assignment-form');\r\n        const select = document.getElementById('assignee-select');\r\n        const help = document.getElementById('assignee-help');\r\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\r\n\r\n        // Блокируем сохранение до загрузки списка\r\n        if (submitBtn) submitBtn.disabled = true;\r\n\r\n        try {\r\n            const resp = await fetch('/api/users', { headers: { 'X-Requested-With': 'XMLHttpRequest' } });\r\n            if (!resp.ok) throw new Error('resp not ok');\r\n\r\n            const users = await resp.json();\r\n            if (!Array.isArray(users) || users.length === 0) throw new Error('empty list');\r\n\r\n            // Очистим и добавим плейсхолдер\r\n            select.innerHTML = '<option value=\"\">-- Выберите исполнителя --</option>';\r\n\r\n            users.forEach(u => {\r\n                const id = u.id ?? u.Id ?? '';\r\n                const userName = u.userName ?? u.UserName ?? '';\r\n                const fullName = u.fullName ?? u.FullName ?? userName;\r\n                if (!userName) return;\r\n                const opt = document.createElement('option');\r\n                // Отправляем в модель строковое имя пользователя (Assignee)\r\n                opt.value = userName;\r\n                opt.textContent = fullName && fullName !== userName ? `${fullName} (${userName})` : userName;\r\n                select.appendChild(opt);\r\n            });\r\n\r\n            // Разблокируем сохранение\r\n            if (submitBtn) submitBtn.disabled = false;\r\n            if (help) help.textContent = 'Выберите исполнителя из списка.';\r\n        } catch (e) {\r\n            console.error('Не удалось загрузить список пользователей', e);\r\n            // Сообщаем о невозможности выбора исполнителя и запрещаем сохранение\r\n            if (help) help.textContent = 'Не удалось загрузить список пользователей. Повторите попытку позже.';\r\n            if (submitBtn) submitBtn.disabled = true;\r\n            // Добавим заблокированную опцию с сообщением\r\n            select.innerHTML = '<option value=\"\">— список пользователей недоступен —</option>';\r\n            select.setAttribute('disabled', 'disabled');\r\n        }\r\n    })();\r\n\r\n    document.getElementById('create-assignment-form').addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n        const form = e.target;\r\n        const formData = new FormData(form);\r\n        const resp = await fetch(form.action, {\r\n            method: 'POST',\r\n            body: formData,\r\n            headers: { 'X-Requested-With': 'XMLHttpRequest' }\r\n        });\r\n        if (resp.ok) {\r\n            bootstrap.Modal.getInstance(document.getElementById('form-modal')).hide();\r\n            if (window.assignmentTable) window.assignmentTable.ajax.reload(null, false);\r\n            if (window.assignmentDataTable) window.assignmentDataTable.ajax.reload(null, false);\r\n        if (window.assignmentDataTable) window.assignmentDataTable.ajax.reload(null, false);\r\n    } else {\r\n        const text = await resp.text();\r\n        console.error(text);\r\n        alert('Ошибка сохранения');\r\n    }\r\n});\r\n</script>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_CreateAssignmentModal.cshtml b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_CreateAssignmentModal.cshtml
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_CreateAssignmentModal.cshtml	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_CreateAssignmentModal.cshtml	(date 1756982227183)
@@ -8,11 +8,25 @@
             <input asp-for="Name" class="form-control" />
             <span asp-validation-for="Name" class="text-danger"></span>
         </div>
-        <div class="mb-3">
+
+        <div class="row g-3">
+            <div class="col">
+                <label asp-for="AcceptDate" class="form-label"></label>
+                <input asp-for="AcceptDate" type="date" class="form-control" value="@Model.AcceptDate.ToString("yyyy-MM-dd")" />
+                <span asp-validation-for="AcceptDate" class="text-danger"></span>
+            </div>
+            <div class="col">
+                <label asp-for="DepartmentNumber" class="form-label"></label>
+                <input asp-for="DepartmentNumber" type="number" class="form-control" />
+            </div>
+        </div>
+
+        <div class="mb-3 mt-2">
             <label asp-for="Description" class="form-label"></label>
             <textarea asp-for="Description" class="form-control"></textarea>
             <span asp-validation-for="Description" class="text-danger"></span>
         </div>
+
         <div class="row g-3">
             <div class="col">
                 <label asp-for="Assignee" class="form-label"></label>
@@ -23,10 +37,25 @@
                 <div id="assignee-help" class="form-text">Необходимо выбрать исполнителя из списка.</div>
             </div>
         </div>
+
         <div class="row g-3 mt-1">
             <div class="col">
-                <label asp-for="DepartmentNumber" class="form-label"></label>
-                <input asp-for="DepartmentNumber" type="number" class="form-control" />
+                <label asp-for="ForwardDepartment" class="form-label"></label>
+                <input asp-for="ForwardDepartment" type="text" class="form-control" />
+                <span asp-validation-for="ForwardDepartment" class="text-danger"></span>
+            </div>
+            <div class="col">
+                <label asp-for="ForwardDate" class="form-label"></label>
+                <input asp-for="ForwardDate" type="date" class="form-control" value="@(Model.ForwardDate.HasValue ? Model.ForwardDate.Value.ToString("yyyy-MM-dd") : "")" />
+                <span asp-validation-for="ForwardDate" class="text-danger"></span>
+            </div>
+        </div>
+
+        <div class="row g-3 mt-1">
+            <div class="col">
+                <label asp-for="DepartmentForwardDate" class="form-label"></label>
+                <input asp-for="DepartmentForwardDate" type="date" class="form-control" value="@(Model.DepartmentForwardDate.HasValue ? Model.DepartmentForwardDate.Value.ToString("yyyy-MM-dd") : "")" />
+                <span asp-validation-for="DepartmentForwardDate" class="text-danger"></span>
             </div>
         </div>
 
@@ -40,7 +69,7 @@
 
         <input type="hidden" asp-for="PatientId" />
         <input type="hidden" asp-for="Id" value="00000000-0000-0000-0000-000000000000" />
-        <input type="hidden" asp-for="AcceptDate" value="@DateTime.UtcNow.ToString("s")" />
+
         <div class="mb-3 mt-2">
             <label asp-for="Note" class="form-label"></label>
             <textarea asp-for="Note" class="form-control"></textarea>
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_EditAssignmentModal.cshtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@model CRM.SocialDepartment.Site.ViewModels.Assignment.EditAssignmentViewModel\r\n\r\n<div class=\"modal-header\">\r\n    <h5 class=\"modal-title\">Редактировать назначение</h5>\r\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n</div>\r\n<form id=\"edit-assignment-form\" method=\"post\" action=\"/api/assignments\">\r\n    @Html.AntiForgeryToken()\r\n    <div class=\"modal-body\">\r\n        <div class=\"mb-3\">\r\n            <label asp-for=\"Name\" class=\"form-label\"></label>\r\n            <input asp-for=\"Name\" class=\"form-control\" />\r\n            <span asp-validation-for=\"Name\" class=\"text-danger\"></span>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label asp-for=\"Description\" class=\"form-label\"></label>\r\n            <textarea asp-for=\"Description\" class=\"form-control\"></textarea>\r\n            <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\r\n        </div>\r\n        <div class=\"row g-3\">\r\n            <div class=\"col\">\r\n                <label asp-for=\"Assignee\" class=\"form-label\"></label>\r\n                <input asp-for=\"Assignee\" class=\"form-control\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"row g-3 mt-1\">\r\n            <div class=\"col\">\r\n                <label asp-for=\"DepartmentNumber\" class=\"form-label\"></label>\r\n                <input asp-for=\"DepartmentNumber\" type=\"number\" class=\"form-control\" />\r\n            </div>\r\n            <div class=\"col\">\r\n                <label asp-for=\"ForwardDepartment\" class=\"form-label\"></label>\r\n                <input asp-for=\"ForwardDepartment\" class=\"form-control\" />\r\n            </div>\r\n        </div>\r\n        <input type=\"hidden\" asp-for=\"PatientId\" />\r\n        <input type=\"hidden\" asp-for=\"Id\" />\r\n        <input type=\"hidden\" asp-for=\"CreatedDate\" />\r\n        <input type=\"hidden\" asp-for=\"AcceptDate\" />\r\n        <input type=\"hidden\" asp-for=\"ForwardDate\" />\r\n        <input type=\"hidden\" asp-for=\"DepartmentForwardDate\" />\r\n        <div class=\"mb-3 mt-2\">\r\n            <label asp-for=\"Note\" class=\"form-label\"></label>\r\n            <textarea asp-for=\"Note\" class=\"form-control\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Отмена</button>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Сохранить</button>\r\n    </div>\r\n</form>\r\n\r\n<script>\r\ndocument.getElementById('edit-assignment-form').addEventListener('submit', async function (e) {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const formData = new FormData(form);\r\n    const resp = await fetch(form.action, {\r\n        method: 'POST',\r\n        body: formData,\r\n        headers: { 'X-Requested-With': 'XMLHttpRequest' }\r\n    });\r\n    if (resp.ok) {\r\n        bootstrap.Modal.getInstance(document.getElementById('form-modal')).hide();\r\n        if (window.assignmentTable) window.assignmentTable.ajax.reload(null, false);\r\n    } else {\r\n        const text = await resp.text();\r\n        console.error(text);\r\n        alert('Ошибка сохранения');\r\n    }\r\n});\r\n</script>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_EditAssignmentModal.cshtml b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_EditAssignmentModal.cshtml
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_EditAssignmentModal.cshtml	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/Views/Assignment/_EditAssignmentModal.cshtml	(date 1756984468392)
@@ -1,9 +1,179 @@
 @model CRM.SocialDepartment.Site.ViewModels.Assignment.EditAssignmentViewModel
 
-<div class="modal-header">
-    <h5 class="modal-title">Редактировать назначение</h5>
-    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
-</div>
+<form id="edit-assignment-form" method="post" action="/api/assignments/@Model.Id">
+    @Html.AntiForgeryToken()
+    <div class="modal-body">
+        <div class="mb-3">
+            <label asp-for="Name" class="form-label"></label>
+            <input asp-for="Name" class="form-control" />
+            <span asp-validation-for="Name" class="text-danger"></span>
+        </div>
+
+        <div class="row g-3">
+            <div class="col">
+                <label asp-for="AcceptDate" class="form-label"></label>
+                <input asp-for="AcceptDate" type="date" class="form-control" value="@Model.AcceptDate.ToString("yyyy-MM-dd")" />
+                <span asp-validation-for="AcceptDate" class="text-danger"></span>
+            </div>
+            <div class="col">
+                <label asp-for="DepartmentNumber" class="form-label"></label>
+                <input asp-for="DepartmentNumber" type="number" class="form-control" />
+                <span asp-validation-for="DepartmentNumber" class="text-danger"></span>
+            </div>
+        </div>
+
+        <div class="mb-3 mt-2">
+            <label asp-for="Description" class="form-label"></label>
+            <textarea asp-for="Description" class="form-control"></textarea>
+            <span asp-validation-for="Description" class="text-danger"></span>
+        </div>
+
+        <div class="row g-3">
+            <div class="col">
+                <label asp-for="Assignee" class="form-label"></label>
+                <select id="assignee-select-edit" class="form-select" name="Assignee" required>
+                    <option value="">-- Выберите исполнителя --</option>
+                </select>
+                <span asp-validation-for="Assignee" class="text-danger"></span>
+                <div id="assignee-help-edit" class="form-text">Необходимо выбрать исполнителя из списка.</div>
+            </div>
+        </div>
+
+        <div class="row g-3 mt-1">
+            <div class="col">
+                <label asp-for="ForwardDepartment" class="form-label"></label>
+                <input asp-for="ForwardDepartment" type="text" class="form-control" />
+                <span asp-validation-for="ForwardDepartment" class="text-danger"></span>
+            </div>
+            <div class="col">
+                <label asp-for="ForwardDate" class="form-label"></label>
+                <input asp-for="ForwardDate" type="date" class="form-control" />
+                <span asp-validation-for="ForwardDate" class="text-danger"></span>
+            </div>
+        </div>
+
+        <div class="row g-3 mt-1">
+            <div class="col">
+                <label asp-for="DepartmentForwardDate" class="form-label"></label>
+                <input asp-for="DepartmentForwardDate" type="date" class="form-control" />
+                <span asp-validation-for="DepartmentForwardDate" class="text-danger"></span>
+            </div>
+        </div>
+
+        <div class="mb-3 mt-2">
+            <label asp-for="PatientId" class="form-label"></label>
+            <select id="patient-select-edit" class="form-select">
+                <option value="">-- Выберите пациента --</option>
+            </select>
+            <span asp-validation-for="PatientId" class="text-danger"></span>
+        </div>
+
+        <input type="hidden" asp-for="PatientId" />
+        <input type="hidden" asp-for="Id" />
+
+        <div class="mb-3 mt-2">
+            <label asp-for="Note" class="form-label"></label>
+            <textarea asp-for="Note" class="form-control"></textarea>
+            <span asp-validation-for="Note" class="text-danger"></span>
+        </div>
+    </div>
+    <div class="modal-footer">
+        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
+        <button type="submit" class="btn btn-primary">Сохранить</button>
+    </div>
+</form>
+
+<script>
+(async function initPatientSelectEdit() {
+    const select = document.getElementById('patient-select-edit');
+    const hidden = document.querySelector('#edit-assignment-form input[name="PatientId"]');
+    const preselectedId = hidden.value && hidden.value !== '00000000-0000-0000-0000-000000000000' ? hidden.value : '';
+
+    async function loadPatients(preselectId) {
+        try {
+            const resp = await fetch('/api/patients', { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
+            if (!resp.ok) return;
+            const patients = await resp.json();
+            select.innerHTML = '<option value="">-- Выберите пациента --</option>';
+
+            const toText = (p) => {
+                const fullName = p.fullName ?? p.FullName ?? '';
+                const birthday = p.birthday ?? p.Birthday;
+                if (fullName && birthday) return `${fullName} (${birthday})`;
+                return fullName || (p.lastName && p.firstName ? `${p.lastName} ${p.firstName}` : `Пациент`);
+            };
+
+            patients.forEach(p => {
+                const id = p.id ?? p.Id;
+                if (!id) return;
+                const opt = document.createElement('option');
+                opt.value = id;
+                opt.textContent = toText(p);
+                select.appendChild(opt);
+            });
+
+            if (preselectId) {
+                const exists = Array.from(select.options).some(o => o.value === preselectId);
+                if (exists) {
+                    select.value = preselectId;
+                }
+            }
+        } catch (e) {
+            console.error('Не удалось загрузить список пациентов', e);
+        }
+    }
+
+    select.addEventListener('change', function () {
+        hidden.value = this.value || '';
+    });
+
+    await loadPatients(preselectedId);
+    if (select.value && !hidden.value) {
+        hidden.value = select.value;
+    }
+})();
+
+(async function initAssigneeSelectEdit() {
+    const form = document.getElementById('edit-assignment-form');
+    const select = document.getElementById('assignee-select-edit');
+    const help = document.getElementById('assignee-help-edit');
+    const submitBtn = form.querySelector('button[type="submit"]');
+
+    if (submitBtn) submitBtn.disabled = true;
+    try {
+        const resp = await fetch('/api/users', { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
+        if (!resp.ok) throw new Error('resp not ok');
+        const users = await resp.json();
+        select.innerHTML = '<option value="">-- Выберите исполнителя --</option>';
+
+        users.forEach(u => {
+            const userName = u.userName ?? u.UserName ?? '';
+            const fullName = u.fullName ?? u.FullName ?? userName;
+            if (!userName) return;
+            const opt = document.createElement('option');
+            opt.value = userName;
+            opt.textContent = fullName && fullName !== userName ? `${fullName} (${userName})` : userName;
+            select.appendChild(opt);
+        });
+
+        // Предвыбор текущего исполнителя
+        const current = '@Model.Assignee';
+        if (current) {
+            const exists = Array.from(select.options).some(o => o.value === current);
+            if (exists) select.value = current;
+        }
+
+        if (submitBtn) submitBtn.disabled = false;
+        if (help) help.textContent = 'Выберите исполнителя из списка.';
+    } catch (e) {
+        console.error('Не удалось загрузить список пользователей', e);
+        if (help) help.textContent = 'Не удалось загрузить список пользователей. Повторите попытку позже.';
+        if (submitBtn) submitBtn.disabled = true;
+        select.innerHTML = '<option value="">— список пользователей недоступен —</option>';
+        select.setAttribute('disabled', 'disabled');
+    }
+})();
+</script>
 <form id="edit-assignment-form" method="post" action="/api/assignments">
     @Html.AntiForgeryToken()
     <div class="modal-body">
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/wwwroot/js/assignment.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n    Назначение: Для страницы списка задач (assignments).\r\n    Версия: 1.0.0\r\n*/\r\n\r\n// Проверка наличия необходимых библиотек\r\nconsole.log('Проверяем наличие библиотек:');\r\nconsole.log('jQuery:', typeof $ !== 'undefined' ? 'Загружен' : 'Не загружен');\r\nconsole.log('DataTables:', typeof $.fn.DataTable !== 'undefined' ? 'Загружен' : 'Не загружен');\r\nif (typeof $.fn.DataTable !== 'undefined') {\r\n    console.log('DataTables версия:', $.fn.dataTable.version);\r\n}\r\n\r\n// Универсальная функция для безопасного отображения сообщений\r\nfunction showMessage(type, title, message) {\r\n    if (window.malomalsky?.message?.[type] && typeof window.malomalsky.message[type] === 'function') {\r\n        try {\r\n            malomalsky.message[type](title, message);\r\n            return;\r\n        } catch (error) {\r\n            console.error('Ошибка в malomalsky.message:', error);\r\n        }\r\n    }\r\n\r\n    if (window.Swal) {\r\n        const config = {\r\n            title: title,\r\n            text: message,\r\n            confirmButtonText: 'OK'\r\n        };\r\n\r\n        switch (type) {\r\n            case 'success': config.icon = 'success'; break;\r\n            case 'error': config.icon = 'error'; break;\r\n            case 'warning': config.icon = 'warning'; break;\r\n            case 'info': config.icon = 'info'; break;\r\n        }\r\n\r\n        Swal.fire(config);\r\n    } else {\r\n        console.log(title + ': ' + message);\r\n    }\r\n}\r\n\r\n// Конфигурация API и маппинг колонок DataTables\r\nconst ASSIGNMENT_API = {\r\n    listActive: '/api/assignments/active',   // POST\r\n    createOrUpdate: '/api/assignments',      // POST (Create/Update)\r\n    delete: (id) => `/api/assignments/${id}`,// DELETE\r\n    modalCreate: '/Assignment/modal/create', // GET (PartialView)\r\n    modalEdit: (id) => `/Assignment/modal/edit?id=${id}` // GET (PartialView)\r\n};\r\n\r\n// Приведение полей ответа сервера к столбцам, которые видите в Razor-разметке\r\n// Заголовки (по порядку):\r\n//  0: ID\r\n//  1: Дата приема заявки от отделения\r\n//  2: Номер отделения\r\n//  3: Описание\r\n//  4: Дата направления\r\n//  5: Куда направили документы\r\n//  6: Что сделано\r\n//  7: Дата передачи в отделение\r\n//  8: Исполнитель\r\n//  9: Примечание\r\n// 10: Дата создания задачи\r\n// 11: Пациент\r\n//\r\n// Ниже укажите имена полей из JSON, который возвращает сервер.\r\n// Пример сопоставления на базе ранее предложенного контроллера (+ вероятные поля домена):\r\nconst COLUMNS_MAP = {\r\n    id: 'id',\r\n    acceptDate: 'acceptDate',                     // Дата приема заявки от отделения\r\n    departmentNumber: 'departmentNumber',         // Номер отделения\r\n    description: 'description',                   // Описание\r\n    forwardDate: 'forwardDate',                   // Дата направления\r\n    forwardDepartment: 'forwardDepartment',       // Куда направили документы\r\n    name: 'name',                                 // Что сделано (при необходимости переименуйте на workDone)\r\n    departmentForwardDate: 'departmentForwardDate', // Дата передачи в отделение\r\n    assignee: 'assignee',                         // Исполнитель\r\n    note: 'note',                                 // Примечание\r\n    createdDate: 'createdDate',                   // Дата создания задачи\r\n    patient: 'patient'                            // Пациент (строка ФИО или код)\r\n};\r\n\r\n// Вспомогательные функции\r\nfunction updateConnectionStatus() {\r\n    const isConnected = true; // В реальном приложении выполните реальную проверку соединения\r\n    $('#connection-status').html(\r\n        isConnected\r\n            ? '<i class=\"fa fa-circle text-success\"></i><small>Подключено</small>'\r\n            : '<i class=\"fa fa-circle text-warning\"></i><small>Polling режим</small>'\r\n    );\r\n}\r\n\r\nfunction updateLastUpdateTime() {\r\n    const now = new Date();\r\n    const timeString = now.toLocaleTimeString('ru-RU', {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    });\r\n    $('#last-update').text(timeString);\r\n}\r\n\r\nfunction updateRecordsCount(count) {\r\n    $('#records-badge').text(count || 0);\r\n}\r\n\r\n// Управление автообновлением данных\r\nlet assignmentAutoRefreshInterval;\r\nlet assignmentSubmitInProgress = false;\r\nfunction startAssignmentAutoRefresh() {\r\n    if ($('#auto-refresh-setting').is(':checked') && window.assignmentDataTable) {\r\n        stopAssignmentAutoRefresh();\r\n        assignmentAutoRefreshInterval = setInterval(() => {\r\n            window.assignmentDataTable.ajax.reload(null, false);\r\n            updateLastUpdateTime();\r\n        }, 30000);\r\n    }\r\n}\r\n\r\nfunction stopAssignmentAutoRefresh() {\r\n    if (assignmentAutoRefreshInterval) {\r\n        clearInterval(assignmentAutoRefreshInterval);\r\n        assignmentAutoRefreshInterval = null;\r\n    }\r\n}\r\n\r\n// Гарантированная инициализация таблицы задач (однократно, с поддержкой динамических вкладок)\r\nfunction ensureAssignmentTableInitialized(forceReload = false) {\r\n    const tableExistsInDom = $('#table').length > 0;\r\n\r\n    // Уже инициализировано — при необходимости мягко перезагрузим\r\n    if (window.assignmentDataTable && $.fn.DataTable.isDataTable('#table')) {\r\n        if (forceReload) {\r\n            window.assignmentDataTable.ajax.reload(null, false);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Если таблицы ещё нет в DOM — инициализируем при показе соответствующей вкладки\r\n    if (!tableExistsInDom) {\r\n        $(document)\r\n            .off('shown.bs.tab.assignment', 'a[data-bs-toggle=\"tab\"]')\r\n            .on('shown.bs.tab.assignment', 'a[data-bs-toggle=\"tab\"]', function () {\r\n                if ($('#table').length > 0 && !$.fn.DataTable.isDataTable('#table')) {\r\n                    const dt = initializeAssignmentDataTable();\r\n                    if (dt) startAssignmentAutoRefresh();\r\n                }\r\n            });\r\n        return;\r\n    }\r\n\r\n    // Инициализация прямо сейчас\r\n    const dt = initializeAssignmentDataTable();\r\n    if (dt) startAssignmentAutoRefresh();\r\n}\r\n\r\n// Гарантированная инициализация таблицы задач (один раз)\r\nfunction ensureAssignmentTableInitialized(forceReload = false) {\r\n    const tableExistsInDom = $('#table').length > 0;\r\n\r\n    // Уже инициализировано — по желанию только перезагрузим\r\n    if (window.assignmentDataTable && $.fn.DataTable.isDataTable('#table')) {\r\n        if (forceReload) {\r\n            window.assignmentDataTable.ajax.reload(null, false);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Если таблицы ещё нет в DOM — подождём события показа таба\r\n    if (!tableExistsInDom) {\r\n        // Подцепимся к событию Bootstrap табов — при первом показе попробуем инициализировать\r\n        $(document).off('shown.assignment.tab', 'a[data-bs-toggle=\"tab\"]').on('shown.assignment.tab', 'a[data-bs-toggle=\"tab\"]', function () {\r\n            if ($('#table').length > 0 && !$.fn.DataTable.isDataTable('#table')) {\r\n                const dt = initializeAssignmentDataTable();\r\n                if (dt) startAssignmentAutoRefresh();\r\n            }\r\n        });\r\n        return;\r\n    }\r\n\r\n    // Инициализация прямо сейчас\r\n    const dt = initializeAssignmentDataTable();\r\n    if (dt) startAssignmentAutoRefresh();\r\n}\r\n\r\n// Загрузка сохраненных настроек\r\nfunction loadAssignmentSettings() {\r\n    const savedSettings = localStorage.getItem('assignmentTableSettings');\r\n    if (savedSettings) {\r\n        try {\r\n            const settings = JSON.parse(savedSettings);\r\n            $('#page-length-setting').val(settings.pageLength || '50');\r\n            $('#auto-refresh-setting').prop('checked', settings.autoRefresh !== false);\r\n            $('#compact-mode-setting').prop('checked', settings.compactMode || false);\r\n            $('#save-state-setting').prop('checked', settings.saveState !== false);\r\n        } catch (e) {\r\n            console.error('Ошибка при загрузке настроек:', e);\r\n        }\r\n    }\r\n}\r\n\r\n// Открытие модалок создания/редактирования\r\nfunction openCreateAssignment(patientId) {\r\n    const url = patientId ? (ASSIGNMENT_API.modalCreate + '?patientId=' + encodeURIComponent(patientId))\r\n        : ASSIGNMENT_API.modalCreate;\r\n\r\n    $.get(url, function (html) {\r\n        $('#form-modal .modal-title').text('Создать задачу');\r\n        $('#form-modal .modal-body').html(html);\r\n        $('#form-modal').modal('show');\r\n        if (window.AddAssignmentFormValidation) {\r\n            AddAssignmentFormValidation.initErrorClearing();\r\n        }\r\n    }).fail(function () {\r\n        showMessage('error', 'Ошибка', 'Не удалось загрузить форму создания задачи');\r\n    });\r\n}\r\n\r\nfunction openEditAssignment(assignmentId) {\r\n    $.get(ASSIGNMENT_API.modalEdit(assignmentId), function (html) {\r\n        $('#form-modal .modal-title').text('Редактировать задачу');\r\n        $('#form-modal .modal-body').html(html);\r\n        $('#form-modal').modal('show');\r\n        if (window.AddAssignmentFormValidation) {\r\n            AddAssignmentFormValidation.initErrorClearing();\r\n        }\r\n    }).fail(function () {\r\n        showMessage('error', 'Ошибка', 'Не удалось загрузить форму редактирования');\r\n    });\r\n}\r\n\r\n// Удаление задачи\r\nfunction deleteAssignment(assignmentId) {\r\n    Swal.fire({\r\n        title: 'Подтверждение',\r\n        text: 'Вы уверены, что хотите удалить эту задачу?',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#d33',\r\n        cancelButtonColor: '#3085d6',\r\n        confirmButtonText: 'Да, удалить',\r\n        cancelButtonText: 'Отмена'\r\n    }).then((result) => {\r\n        if (result.isConfirmed) {\r\n            $.ajax({\r\n                url: ASSIGNMENT_API.delete(assignmentId),\r\n                type: 'DELETE',\r\n                headers: { 'X-Requested-With': 'XMLHttpRequest' }\r\n            }).done(function (response, status, xhr) {\r\n                // Для 204 No Content нет тела — считаем успехом\r\n                showMessage('success', 'Успешно', 'Задача удалена.');\r\n                if (window.assignmentDataTable) {\r\n                    window.assignmentDataTable.ajax.reload();\r\n                }\r\n            }).fail(function (xhr) {\r\n                showMessage('error', 'Ошибка', 'Ошибка при удалении задачи.');\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n// Инициализация DataTable для задач\r\nfunction initializeAssignmentDataTable() {\r\n    console.log('Начинаем инициализацию DataTable (assignments)');\r\n\r\n    const $table = $('#table');\r\n    console.log('Таблица найдена в DOM:', $table.length > 0);\r\n    if ($table.length === 0) {\r\n        console.error('Таблица с id=\"table\" не найдена в DOM');\r\n        return null;\r\n    }\r\n\r\n    if ($.fn.DataTable.isDataTable('#table')) {\r\n        console.log('DataTable уже существует, уничтожаем старую');\r\n        $('#table').DataTable().destroy();\r\n        $('#table').empty();\r\n    }\r\n\r\n    const url = ASSIGNMENT_API.listActive;\r\n    console.log('URL для AJAX запроса:', url);\r\n\r\n    try {\r\n        const dataTable = $('#table').DataTable({\r\n            processing: true,\r\n            serverSide: true,\r\n            rowId: COLUMNS_MAP.id,\r\n            ajax: {\r\n                url: url,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                },\r\n                data: function (d) {\r\n                    console.log('Отправляемые данные DataTable:', d);\r\n                    return d;\r\n                },\r\n                beforeSend: function () {\r\n                    console.log('Отправляем AJAX запрос на:', url);\r\n                },\r\n                dataSrc: function (json) {\r\n                    console.log('Получен ответ от сервера:', json);\r\n\r\n                    if (!json || typeof json !== 'object') {\r\n                        console.error('Неверный формат ответа от сервера');\r\n                        return [];\r\n                    }\r\n\r\n                    if (json.error) {\r\n                        console.error('Сервер вернул ошибку:', json.error);\r\n                        showMessage('error', 'Ошибка', json.error);\r\n                        return [];\r\n                    }\r\n\r\n                    if (json.data && Array.isArray(json.data)) {\r\n                        updateRecordsCount(json.recordsTotal || 0);\r\n                        updateLastUpdateTime();\r\n                        return json.data;\r\n                    }\r\n\r\n                    updateRecordsCount(0);\r\n                    updateLastUpdateTime();\r\n                    return [];\r\n                },\r\n                error: function (xhr, status, error) {\r\n                    console.error('Ошибка AJAX запроса:', { xhr, status, error });\r\n                    if (status !== 'abort') {\r\n                        showMessage('error', 'Ошибка', 'Не удалось загрузить данные задач');\r\n                    }\r\n                    return [];\r\n                }\r\n            },\r\n            columns: [\r\n                // Действия (просмотр/редактирование/удаление)\r\n                {\r\n                    data: COLUMNS_MAP.id,\r\n                    title: 'Действия',\r\n                    orderable: false,\r\n                    searchable: false,\r\n                    render: function (data, type, row) {\r\n                        return `\r\n                            <div class=\"dropdown\">\r\n                                <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\"\r\n                                        data-bs-toggle=\"dropdown\"\r\n                                        data-bs-display=\"static\"\r\n                                        data-bs-boundary=\"viewport\"\r\n                                        data-bs-auto-close=\"outside\"\r\n                                        aria-expanded=\"false\">\r\n                                    Действие\r\n                                </button>\r\n                                <ul class=\"dropdown-menu\">\r\n                                    <li><a class=\"dropdown-item btn-view-assignment\" href=\"#\" data-assignment-id=\"${data}\">Посмотреть</a></li>\r\n                                    <li><a class=\"dropdown-item btn-edit-assignment\" href=\"#\" data-assignment-id=\"${data}\">Редактировать</a></li>\r\n                                    <li><a class=\"dropdown-item btn-delete-assignment\" href=\"#\" data-assignment-id=\"${data}\">Удалить</a></li>\r\n                                </ul>\r\n                            </div>\r\n                        `;\r\n                    }\r\n                },\r\n\r\n                // Столбцы по Вашим заголовкам\r\n                { data: COLUMNS_MAP.id, title: 'ID', visible: false, searchable: false },\r\n\r\n                { data: COLUMNS_MAP.acceptDate, title: 'Дата приема заявки от отделения', className: 'text-center',\r\n                    render: function (d) { return formatDate(d); } },\r\n\r\n                { data: COLUMNS_MAP.departmentNumber, title: 'Номер отделения', className: 'text-center' },\r\n\r\n                { data: COLUMNS_MAP.description, title: 'Описание', className: 'fw-medium' },\r\n\r\n                { data: COLUMNS_MAP.forwardDate, title: 'Дата направления', className: 'text-center',\r\n                    render: function (d) { return formatDate(d); } },\r\n\r\n                { data: COLUMNS_MAP.forwardDepartment, title: 'Куда направили документы', className: 'text-center' },\r\n\r\n                { data: COLUMNS_MAP.name, title: 'Что сделано', className: 'fw-medium' },\r\n\r\n                { data: COLUMNS_MAP.departmentForwardDate, title: 'Дата передачи в отделение', className: 'text-center',\r\n                    render: function (d) { return formatDate(d); } },\r\n\r\n                { data: COLUMNS_MAP.assignee, title: 'Исполнитель', className: 'text-center' },\r\n\r\n                { data: COLUMNS_MAP.note, title: 'Примечание', className: 'fw-medium' },\r\n\r\n                { data: COLUMNS_MAP.createdDate, title: 'Дата создания задачи', className: 'text-center',\r\n                    render: function (d) { return formatDate(d); } },\r\n\r\n                { data: COLUMNS_MAP.patient, title: 'Пациент', className: 'fw-medium' }\r\n            ],\r\n            order: [[11, 'desc']], // сортируем по \"Дата создания задачи\" (индекс колонки может отличаться — проверьте)\r\n            pageLength: 100,\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, 'Все']],\r\n            language: {\r\n                url: '/lib/datatables.net-bs5/language/ru.json'\r\n            },\r\n            dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6\"f>>' +\r\n                '<\"row\"<\"col-sm-12\"tr>>' +\r\n                '<\"row\"<\"col-sm-12 col-md-5\"i><\"col-sm-12 col-md-7\"p>>',\r\n            responsive: true,\r\n            initComplete: function () {\r\n                console.log('DataTable (assignments) инициализирована');\r\n                this.api().on('search.dt', function () {\r\n                    console.log('Выполняется поиск в таблице задач');\r\n                });\r\n                this.api().on('xhr.dt', function () {\r\n                    console.log('XHR запрос для задач завершен');\r\n                });\r\n            }\r\n        });\r\n\r\n        window.assignmentDataTable = dataTable;\r\n        console.log('DataTable сохранена в window.assignmentDataTable');\r\n\r\n        // Гарантируем отсутствие обрезания выпадающих меню в обертках DataTables\r\n        try {\r\n            const $wrapper = $('#table').closest('.dataTables_wrapper');\r\n            $wrapper.css('overflow', 'visible');\r\n            $wrapper.find('.dataTables_scroll, .dataTables_scrollBody').css('overflow', 'visible');\r\n            $('.modern-datatable-container').css('overflow', 'visible');\r\n        } catch (e) {\r\n            console.warn('Не удалось применить overflow fix к оберткам DataTables:', e);\r\n        }\r\n\r\n        return dataTable;\r\n    } catch (error) {\r\n        console.error('Ошибка при инициализации DataTable (assignments):', error);\r\n        showMessage('error', 'Ошибка', 'Не удалось инициализировать таблицу данных задач.');\r\n        return null;\r\n    }\r\n}\r\n\r\n// Форматирование даты dd.MM.yyyy\r\nfunction formatDate(date) {\r\n    if (!date) return '';\r\n    const d = new Date(date);\r\n    if (isNaN(d.getTime())) return '';\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const year = d.getFullYear();\r\n    return `${day}.${month}.${year}`;\r\n}\r\n\r\n// Преобразование из dd.MM.yyyy в ISO (если потребуется)\r\nfunction formatDateForInput(dateString) {\r\n    if (!dateString) return '';\r\n    const parts = dateString.split('.');\r\n    if (parts.length !== 3) return '';\r\n    const day = parts[0];\r\n    const month = parts[1];\r\n    const year = parts[2];\r\n    return `${year}-${month}-${day}`;\r\n}\r\n\r\n// CSS-фикс для dropdown внутри таблицы (DataTables + Bootstrap)\r\nfunction injectAssignmentDropdownFixStyles() {\r\n    if (document.getElementById('assignment-dropdown-fix')) return;\r\n    const style = document.createElement('style');\r\n    style.id = 'assignment-dropdown-fix';\r\n    style.textContent = `\r\n/* Разрешаем выпадающим меню выходить за границы оберток */\r\n.modern-datatable-container,\r\n.dataTables_wrapper,\r\n.table-responsive {\r\n    overflow: visible !important;\r\n}\r\n\r\n/* Если используется прокрутка DataTables */\r\n.dataTables_wrapper .dataTables_scroll,\r\n.dataTables_wrapper .dataTables_scrollBody {\r\n    overflow: visible !important;\r\n}\r\n\r\n/* Поднимаем меню над строками таблицы */\r\ntable.dataTable td .dropdown-menu {\r\n    z-index: 1061; /* выше, чем стандартный 1000 */\r\n}\r\n    `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n// Обработчики событий\r\n$(document).ready(function () {\r\n    console.log('Document ready: assignment.js');\r\n\r\n    if (typeof $ === 'undefined') {\r\n        console.error('jQuery не загружен');\r\n        return;\r\n    }\r\n    if (typeof $.fn.DataTable === 'undefined') {\r\n        console.error('DataTables не загружен');\r\n        return;\r\n    }\r\n\r\n    // Инжектим CSS-фикс для dropdown внутри таблицы\r\n    injectAssignmentDropdownFixStyles();\r\n\r\n    // Инициализация окружения\r\n    loadAssignmentSettings();\r\n    updateConnectionStatus();\r\n    updateLastUpdateTime();\r\n\r\n    // Инициализация DataTable (гарантированная)\r\n    ensureAssignmentTableInitialized();\r\n\r\n    // Инициализация при показе вкладок (если таблица вставляется динамически)\r\n    $(document).off('shown.assignment.tab', 'a[data-bs-toggle=\"tab\"]').on('shown.assignment.tab', 'a[data-bs-toggle=\"tab\"]', function () {\r\n        ensureAssignmentTableInitialized();\r\n    });\r\n\r\n    // Кнопка \"Добавить задачу\" — одноразовая привязка\r\n    $(document).off('click.assignment', '#add-assignment').on('click.assignment', '#add-assignment', function (e) {\r\n        e.preventDefault();\r\n        openCreateAssignment();\r\n    });\r\n\r\n    // Отправка данных из модального окна: Создать задачу (одноразовая привязка с namespace)\r\n    $(document).off('submit.assignment', '#create-assignment-form').on('submit.assignment', '#create-assignment-form', function (e) {\r\n        e.preventDefault();\r\n\r\n        const $form = $(this);\r\n        const url = $form.attr('action');\r\n\r\n        if (window.AddAssignmentFormValidation) {\r\n            AddAssignmentFormValidation.clearValidationErrors();\r\n        }\r\n\r\n        const formData = new FormData($form[0]);\r\n        const data = new URLSearchParams();\r\n        for (const pair of formData.entries()) {\r\n            data.append(pair[0], pair[1]);\r\n        }\r\n\r\n        const headers = {\r\n            \"CSRF-TOKEN\": $form.find('input[name=\"__RequestVerificationToken\"]').val()\r\n        };\r\n\r\n        $.ajax({\r\n            url: url,\r\n            type: 'POST',\r\n            data: data.toString(),\r\n            contentType: 'application/x-www-form-urlencoded',\r\n            headers: headers,\r\n            beforeSend: function () {\r\n                $(\"#form-modal\").find(':submit').attr('disabled', true).html('<div class=\"spinner-border spinner-border-sm\" role=\"status\"></div>');\r\n            },\r\n            success: function () {\r\n                $('#form-modal').modal('hide');\r\n                showMessage('success', 'Успешно', 'Задача добавлена');\r\n\r\n                // Гарантируем инициализацию и мягкую перезагрузку\r\n                ensureAssignmentTableInitialized(true);\r\n                if (window.assignmentDataTable) {\r\n                    window.assignmentDataTable.ajax.reload(null, false);\r\n                }\r\n            },\r\n            error: function (xhr) {\r\n                $(\"#form-modal\").find(':submit').html('Сохранить').attr('disabled', false);\r\n\r\n                if (xhr.status === 400) {\r\n                    try {\r\n                        const response = JSON.parse(xhr.responseText);\r\n                        console.log('Ответ с ошибками валидации:', response);\r\n\r\n                        if (Array.isArray(response)) {\r\n                            AddAssignmentFormValidation.showValidationErrors(response);\r\n                            return;\r\n                        }\r\n                        if (response && response.Data && Array.isArray(response.Data.Errors)) {\r\n                            AddAssignmentFormValidation.showValidationErrors(response.Data.Errors);\r\n                            return;\r\n                        }\r\n                        if (response && typeof response === 'object') {\r\n                            const collected = [];\r\n                            Object.keys(response).forEach(k => {\r\n                                const messages = response[k];\r\n                                if (Array.isArray(messages)) {\r\n                                    messages.forEach(m => collected.push(m));\r\n                                } else if (messages && typeof messages === 'object' && messages.errors) {\r\n                                    messages.errors.forEach(e => collected.push(e.errorMessage || e));\r\n                                }\r\n                            });\r\n                            if (collected.length) {\r\n                                AddAssignmentFormValidation.showValidationErrors(collected);\r\n                                return;\r\n                            }\r\n                        }\r\n                    } catch (parseError) {\r\n                        console.log('Не удалось распарсить ответ с ошибками:', parseError);\r\n                    }\r\n                }\r\n\r\n                const errorMessage = 'Произошла ошибка при добавлении задачи';\r\n                showMessage('error', 'Ошибка', errorMessage);\r\n            }\r\n        });\r\n    });\r\n\r\n    // Очистка ошибок при вводе\r\n    $(document).on('input focus', '.form-control.is-invalid, .form-select.is-invalid', function () {\r\n        $(this).removeClass('is-invalid');\r\n        $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();\r\n    });\r\n    $(document).on('change', '.form-select.is-invalid', function () {\r\n        $(this).removeClass('is-invalid');\r\n        $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();\r\n    });\r\n\r\n    // Кнопка \"Обновить данные\"\r\n    $(document).on('click', '#reload-data', function (e) {\r\n        e.preventDefault();\r\n        if (window.assignmentDataTable) {\r\n            window.assignmentDataTable.ajax.reload(function () {\r\n                updateLastUpdateTime();\r\n            }, false);\r\n        }\r\n    });\r\n\r\n    // Кнопка \"Полноэкранный режим\"\r\n    $(document).on('click', '#fullscreen-toggle', function (e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const $container = $('.modern-datatable-container');\r\n        const $icon = $(this).find('i');\r\n\r\n        if (!$container.hasClass('fullscreen-mode')) {\r\n            $container.addClass('fullscreen-mode');\r\n            $('body').addClass('datatable-fullscreen');\r\n            $icon.removeClass('fa-expand').addClass('fa-compress');\r\n\r\n            $container.css({\r\n                'position': 'fixed',\r\n                'top': '0',\r\n                'left': '0',\r\n                'right': '0',\r\n                'bottom': '0',\r\n                'z-index': '1040',\r\n                'background': '#fff'\r\n            });\r\n\r\n            if (window.assignmentDataTable) {\r\n                setTimeout(function () {\r\n                    window.assignmentDataTable.columns.adjust().draw();\r\n                }, 200);\r\n            }\r\n        } else {\r\n            $container.removeClass('fullscreen-mode');\r\n            $('body').removeClass('datatable-fullscreen');\r\n            $icon.removeClass('fa-compress').addClass('fa-expand');\r\n\r\n            $container.css({\r\n                'position': '',\r\n                'top': '',\r\n                'left': '',\r\n                'right': '',\r\n                'bottom': '',\r\n                'z-index': '',\r\n                'background': ''\r\n            });\r\n\r\n            if (window.assignmentDataTable) {\r\n                setTimeout(function () {\r\n                    window.assignmentDataTable.columns.adjust();\r\n                    window.assignmentDataTable.draw();\r\n                }, 300);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Делегированные обработчики для действий в строке\r\n    $(document).on('click', '.btn-view-assignment', function (e) {\r\n        e.preventDefault();\r\n        const assignmentId = $(this).data('assignment-id');\r\n        // Если есть страница карточки — раскомментируйте:\r\n        // window.location.href = `/Assignment/Card/${assignmentId}`;\r\n        showMessage('info', 'Информация', 'Переход к карточке задачи не настроен');\r\n    });\r\n\r\n    $(document).on('click', '.btn-edit-assignment', function (e) {\r\n        e.preventDefault();\r\n        const assignmentId = $(this).data('assignment-id');\r\n        openEditAssignment(assignmentId);\r\n    });\r\n\r\n    $(document).on('click', '.btn-delete-assignment', function (e) {\r\n        e.preventDefault();\r\n        const assignmentId = $(this).data('assignment-id');\r\n        deleteAssignment(assignmentId);\r\n    });\r\n\r\n    // Настройки таблицы\r\n    $('#apply-settings').on('click', function () {\r\n        const pageLength = $('#page-length-setting').val();\r\n        const autoRefresh = $('#auto-refresh-setting').is(':checked');\r\n        const compactMode = $('#compact-mode-setting').is(':checked');\r\n\r\n        if (window.assignmentDataTable) {\r\n            $('#table').toggleClass('table-sm', compactMode);\r\n\r\n            const settings = {\r\n                pageLength: pageLength,\r\n                autoRefresh: autoRefresh,\r\n                compactMode: compactMode\r\n            };\r\n            localStorage.setItem('assignmentTableSettings', JSON.stringify(settings));\r\n\r\n            window.assignmentDataTable.page.len(pageLength === '-1' ? -1 : parseInt(pageLength)).draw();\r\n\r\n            if (autoRefresh) {\r\n                startAssignmentAutoRefresh();\r\n            } else {\r\n                stopAssignmentAutoRefresh();\r\n            }\r\n        }\r\n\r\n        $('#table-settings-modal').modal('hide');\r\n    });\r\n\r\n    // Горячие клавиши\r\n    $(document).on('keydown', function (e) {\r\n        if (!$(e.target).is('input, textarea, select')) {\r\n            if (e.ctrlKey && e.key === 'n') {\r\n                e.preventDefault();\r\n                $('#add-assignment').click();\r\n            } else if (e.key === 'F5') {\r\n                e.preventDefault();\r\n                $('#reload-data').click();\r\n            } else if (e.key === 'F11') {\r\n                e.preventDefault();\r\n                $('#fullscreen-toggle').click();\r\n            } else if (e.key === 'Escape' && $('.modern-datatable-container').hasClass('fullscreen-mode')) {\r\n                e.preventDefault();\r\n                $('#fullscreen-toggle').click();\r\n            }\r\n        }\r\n    });\r\n\r\n    console.log('Инициализация завершена');\r\n    console.log('DataTable instance:', window.assignmentDataTable);\r\n    console.log('AJAX URL:', window.assignmentDataTable?.ajax?.url());\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/wwwroot/js/assignment.js b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/wwwroot/js/assignment.js
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/wwwroot/js/assignment.js	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/wwwroot/js/assignment.js	(date 1756985461991)
@@ -3,7 +3,6 @@
     Версия: 1.0.0
 */
 
-// Проверка наличия необходимых библиотек
 console.log('Проверяем наличие библиотек:');
 console.log('jQuery:', typeof $ !== 'undefined' ? 'Загружен' : 'Не загружен');
 console.log('DataTables:', typeof $.fn.DataTable !== 'undefined' ? 'Загружен' : 'Не загружен');
@@ -11,7 +10,6 @@
     console.log('DataTables версия:', $.fn.dataTable.version);
 }
 
-// Универсальная функция для безопасного отображения сообщений
 function showMessage(type, title, message) {
     if (window.malomalsky?.message?.[type] && typeof window.malomalsky.message[type] === 'function') {
         try {
@@ -42,7 +40,6 @@
     }
 }
 
-// Конфигурация API и маппинг колонок DataTables
 const ASSIGNMENT_API = {
     listActive: '/api/assignments/active',   // POST
     createOrUpdate: '/api/assignments',      // POST (Create/Update)
@@ -51,23 +48,7 @@
     modalEdit: (id) => `/Assignment/modal/edit?id=${id}` // GET (PartialView)
 };
 
-// Приведение полей ответа сервера к столбцам, которые видите в Razor-разметке
-// Заголовки (по порядку):
-//  0: ID
-//  1: Дата приема заявки от отделения
-//  2: Номер отделения
-//  3: Описание
-//  4: Дата направления
-//  5: Куда направили документы
-//  6: Что сделано
-//  7: Дата передачи в отделение
-//  8: Исполнитель
-//  9: Примечание
-// 10: Дата создания задачи
-// 11: Пациент
-//
-// Ниже укажите имена полей из JSON, который возвращает сервер.
-// Пример сопоставления на базе ранее предложенного контроллера (+ вероятные поля домена):
+
 const COLUMNS_MAP = {
     id: 'id',
     acceptDate: 'acceptDate',                     // Дата приема заявки от отделения
@@ -107,7 +88,6 @@
     $('#records-badge').text(count || 0);
 }
 
-// Управление автообновлением данных
 let assignmentAutoRefreshInterval;
 let assignmentSubmitInProgress = false;
 function startAssignmentAutoRefresh() {
@@ -127,11 +107,9 @@
     }
 }
 
-// Гарантированная инициализация таблицы задач (однократно, с поддержкой динамических вкладок)
 function ensureAssignmentTableInitialized(forceReload = false) {
     const tableExistsInDom = $('#table').length > 0;
 
-    // Уже инициализировано — при необходимости мягко перезагрузим
     if (window.assignmentDataTable && $.fn.DataTable.isDataTable('#table')) {
         if (forceReload) {
             window.assignmentDataTable.ajax.reload(null, false);
@@ -139,7 +117,6 @@
         return;
     }
 
-    // Если таблицы ещё нет в DOM — инициализируем при показе соответствующей вкладки
     if (!tableExistsInDom) {
         $(document)
             .off('shown.bs.tab.assignment', 'a[data-bs-toggle="tab"]')
@@ -152,12 +129,10 @@
         return;
     }
 
-    // Инициализация прямо сейчас
     const dt = initializeAssignmentDataTable();
     if (dt) startAssignmentAutoRefresh();
 }
 
-// Гарантированная инициализация таблицы задач (один раз)
 function ensureAssignmentTableInitialized(forceReload = false) {
     const tableExistsInDom = $('#table').length > 0;
 
@@ -169,9 +144,7 @@
         return;
     }
 
-    // Если таблицы ещё нет в DOM — подождём события показа таба
     if (!tableExistsInDom) {
-        // Подцепимся к событию Bootstrap табов — при первом показе попробуем инициализировать
         $(document).off('shown.assignment.tab', 'a[data-bs-toggle="tab"]').on('shown.assignment.tab', 'a[data-bs-toggle="tab"]', function () {
             if ($('#table').length > 0 && !$.fn.DataTable.isDataTable('#table')) {
                 const dt = initializeAssignmentDataTable();
@@ -181,12 +154,10 @@
         return;
     }
 
-    // Инициализация прямо сейчас
     const dt = initializeAssignmentDataTable();
     if (dt) startAssignmentAutoRefresh();
 }
 
-// Загрузка сохраненных настроек
 function loadAssignmentSettings() {
     const savedSettings = localStorage.getItem('assignmentTableSettings');
     if (savedSettings) {
@@ -202,7 +173,6 @@
     }
 }
 
-// Открытие модалок создания/редактирования
 function openCreateAssignment(patientId) {
     const url = patientId ? (ASSIGNMENT_API.modalCreate + '?patientId=' + encodeURIComponent(patientId))
         : ASSIGNMENT_API.modalCreate;
@@ -256,7 +226,17 @@
                     window.assignmentDataTable.ajax.reload();
                 }
             }).fail(function (xhr) {
-                showMessage('error', 'Ошибка', 'Ошибка при удалении задачи.');
+                let msg = 'Ошибка при удалении задачи.';
+                try {
+                    // Пытаемся извлечь сообщение из JSON-ответа API
+                    const json = xhr.responseJSON || JSON.parse(xhr.responseText);
+                    msg = json?.message || json?.Message || json?.error || msg;
+                    // Если ответ в формате ApiResponse<T>
+                    if (json && json.Success === false && json.Message) {
+                        msg = json.Message;
+                    }
+                } catch (_) { /* ignore parse errors */ }
+                showMessage('error', 'Ошибка', msg);
             });
         }
     });
@@ -477,10 +457,86 @@
 table.dataTable td .dropdown-menu {
     z-index: 1061; /* выше, чем стандартный 1000 */
 }
+
+/* Класс для меню, портированного в body */
+.assignment-portalized-menu {
+    display: block !important;
+}
     `;
     document.head.appendChild(style);
 }
 
+// Перенос dropdown-меню в body при открытии и возврат при закрытии
+function setupAssignmentDropdownPortal() {
+    // Делегированные обработчики на кнопки дропдауна внутри #table
+    $(document)
+        .off('show.bs.dropdown.assignmentPortal', '#table .dropdown-toggle')
+        .on('show.bs.dropdown.assignmentPortal', '#table .dropdown-toggle', function () {
+            const $toggle = $(this);
+            const $menu = $toggle.siblings('.dropdown-menu');
+            if (!$menu.length) return;
+
+            // Сохраняем исходного родителя и ссылку на меню
+            const $originalParent = $menu.parent();
+            $menu.data('assignment-original-parent', $originalParent);
+            $toggle.data('assignment-portal-menu', $menu);
+
+            // Переносим меню в body
+            $('body').append($menu.detach());
+            $menu.addClass('assignment-portalized-menu');
+
+            // Позиционируем меню фиксированно по кнопке
+            function reposition() {
+                const rect = $toggle[0].getBoundingClientRect();
+                const menuWidth = $menu.outerWidth();
+                const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
+
+                let left = rect.left;
+                if (left + menuWidth > viewportWidth - 8) {
+                    left = Math.max(8, viewportWidth - menuWidth - 8);
+                }
+                const top = rect.bottom; // открываем вниз
+
+                $menu.css({
+                    position: 'fixed',
+                    top: Math.round(top) + 'px',
+                    left: Math.round(left) + 'px',
+                    transform: 'none',
+                    zIndex: 1080
+                });
+            }
+
+            $menu.data('assignment-reposition', reposition);
+            reposition();
+
+            // Обновляем позицию при скролле и ресайзе
+            $(window).on('scroll.assignmentPortal resize.assignmentPortal', reposition);
+        })
+        .off('hidden.bs.dropdown.assignmentPortal', '#table .dropdown-toggle')
+        .on('hidden.bs.dropdown.assignmentPortal', '#table .dropdown-toggle', function () {
+            const $toggle = $(this);
+            const $menu = $toggle.data('assignment-portal-menu');
+            $(window).off('scroll.assignmentPortal resize.assignmentPortal');
+
+            if ($menu && $menu.length) {
+                const $originalParent = $menu.data('assignment-original-parent');
+                $menu.removeAttr('style')
+                     .removeClass('assignment-portalized-menu')
+                     .removeData('assignment-original-parent')
+                     .removeData('assignment-reposition');
+
+                if ($originalParent && $originalParent.length) {
+                    $originalParent.append($menu.detach());
+                } else {
+                    // Fallback — вернуть рядом с кнопкой
+                    $toggle.parent().append($menu.detach());
+                }
+
+                $toggle.removeData('assignment-portal-menu');
+            }
+        });
+}
+
 // Обработчики событий
 $(document).ready(function () {
     console.log('Document ready: assignment.js');
@@ -497,6 +553,9 @@
     // Инжектим CSS-фикс для dropdown внутри таблицы
     injectAssignmentDropdownFixStyles();
 
+    // Включаем портализацию dropdown-меню действий
+    setupAssignmentDropdownPortal();
+
     // Инициализация окружения
     loadAssignmentSettings();
     updateConnectionStatus();
@@ -597,6 +656,71 @@
             }
         });
     });
+
+    // Отправка данных из модального окна: Редактировать задачу (PATCH)
+    $(document).off('submit.assignment', '#edit-assignment-form').on('submit.assignment', '#edit-assignment-form', function (e) {
+        e.preventDefault();
+
+        const $form = $(this);
+        const url = $form.attr('action'); // /api/assignments/{id}
+
+        if (window.AddAssignmentFormValidation) {
+            AddAssignmentFormValidation.clearValidationErrors();
+        }
+
+        const formData = new FormData($form[0]);
+        const data = new URLSearchParams();
+        for (const pair of formData.entries()) {
+            data.append(pair[0], pair[1]);
+        }
+
+        const headers = {
+            "CSRF-TOKEN": $form.find('input[name="__RequestVerificationToken"]').val()
+        };
+
+        $.ajax({
+            url: url,
+            type: 'PATCH',
+            data: data.toString(),
+            contentType: 'application/x-www-form-urlencoded',
+            headers: headers,
+            beforeSend: function () {
+                $("#form-modal").find(':submit').attr('disabled', true).html('<div class="spinner-border spinner-border-sm" role="status"></div>');
+            },
+            success: function () {
+                $('#form-modal').modal('hide');
+                showMessage('success', 'Успешно', 'Задача обновлена');
+
+                ensureAssignmentTableInitialized(true);
+                if (window.assignmentDataTable) {
+                    window.assignmentDataTable.ajax.reload(null, false);
+                }
+            },
+            error: function (xhr) {
+                $("#form-modal").find(':submit').html('Сохранить').attr('disabled', false);
+
+                if (xhr.status === 400) {
+                    try {
+                        const response = JSON.parse(xhr.responseText);
+
+                        if (Array.isArray(response)) {
+                            AddAssignmentFormValidation.showValidationErrors(response);
+                            return;
+                        }
+                        if (response && response.Data && Array.isArray(response.Data.Errors)) {
+                            AddAssignmentFormValidation.showValidationErrors(response.Data.Errors);
+                            return;
+                        }
+                    } catch (parseError) {
+                        console.log('Не удалось распарсить ответ с ошибками:', parseError);
+                    }
+                }
+
+                const errorMessage = 'Произошла ошибка при обновлении задачи';
+                showMessage('error', 'Ошибка', errorMessage);
+            }
+        });
+    });
 
     // Очистка ошибок при вводе
     $(document).on('input focus', '.form-control.is-invalid, .form-select.is-invalid', function () {
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/CreateAssignmentViewModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace CRM.SocialDepartment.Site.ViewModels.Assignment;\r\n\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\n\r\npublic class CreateAssignmentViewModel : IValidatableObject\r\n{\r\n    public Guid Id { get; set; }\r\n\r\n    public int DepartmentNumber { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Название обязательно для заполнения\")]\r\n    [DisplayName(\"Название\")]\r\n    public string Name { get; set; } = string.Empty;\r\n\r\n    [Required(ErrorMessage = \"Дата принятия обязательна для заполнения\")]\r\n    [DisplayName(\"Дата принятия задания\")]\r\n    [DisplayFormat(DataFormatString = \"{0:dd.MM.yyyy}\", ApplyFormatInEditMode = true)]\r\n    public DateTime AcceptDate { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Описание обязательно для заполнения\")]\r\n    [DisplayName(\"Описание\")]\r\n    public string Description { get; set; } = string.Empty;\r\n\r\n    [Required(ErrorMessage = \"Исполнитель обязателен для заполнения\")]\r\n    [DisplayName(\"Исполнитель\")]\r\n    public string Assignee { get; set; } = string.Empty;\r\n\r\n    [Required(ErrorMessage = \"Пациент обязателен для заполнения\")]\r\n    [DisplayName(\"Пациент\")]\r\n    public Guid PatientId { get; set; }\r\n\r\n    public string? Note { get; set; }\r\n\r\n    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\r\n    {\r\n        var resultList = new List<ValidationResult>();\r\n\r\n        if (string.IsNullOrEmpty(Name))\r\n            resultList.Add(new(\"Название задачи не может быть пустым\", [nameof(Name)]));\r\n        if (string.IsNullOrEmpty(Description))\r\n            resultList.Add(new(\"Описание не может быть пустым\", [nameof(Description)]));\r\n        if (string.IsNullOrEmpty(Assignee))\r\n            resultList.Add(new(\"Исполнитель не может отсутствовать\", [nameof(Assignee)]));\r\n        if (PatientId == Guid.Empty)\r\n            resultList.Add(new(\"Пациент не выбран\", [nameof(PatientId)]));\r\n\r\n        return resultList;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/CreateAssignmentViewModel.cs b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/CreateAssignmentViewModel.cs
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/CreateAssignmentViewModel.cs	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/CreateAssignmentViewModel.cs	(date 1756982227192)
@@ -18,6 +18,17 @@
     [DisplayFormat(DataFormatString = "{0:dd.MM.yyyy}", ApplyFormatInEditMode = true)]
     public DateTime AcceptDate { get; set; }
 
+    [DisplayName("Дата направления")]
+    [DisplayFormat(DataFormatString = "{0:dd.MM.yyyy}", ApplyFormatInEditMode = true)]
+    public DateTime? ForwardDate { get; set; }
+
+    [DisplayName("Куда направили документы")]
+    public string? ForwardDepartment { get; set; } = string.Empty;
+
+    [DisplayName("Дата передачи в отделение")]
+    [DisplayFormat(DataFormatString = "{0:dd.MM.yyyy}", ApplyFormatInEditMode = true)]
+    public DateTime? DepartmentForwardDate { get; set; }
+
     [Required(ErrorMessage = "Описание обязательно для заполнения")]
     [DisplayName("Описание")]
     public string Description { get; set; } = string.Empty;
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/MappingProfile/ProjectMappingProfile.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using AutoMapper;\r\nusing CRM.SocialDepartment.Application.DTOs;\r\nusing CRM.SocialDepartment.Domain.Entities;\r\nusing CRM.SocialDepartment.Domain.Entities.Patients;\r\nusing CRM.SocialDepartment.Domain.Entities.Patients.Documents;\r\nusing CRM.SocialDepartment.Infrastructure.DataAccess.MongoDb.Data;\r\nusing CRM.SocialDepartment.Site.Models.Patient;\r\nusing CRM.SocialDepartment.Site.ViewModels.Assignment;\r\nusing CRM.SocialDepartment.Site.ViewModels.Patient;\r\nusing CRM.SocialDepartment.Site.ViewModels.User;\r\nusing CRM.SocialDepartment.Site.ViewModels.Role;\r\nusing CRM.SocialDepartment.Site.ViewModels.UserActivityLog;\r\n\r\nnamespace CRM.SocialDepartment.Site.MappingProfile\r\n{\r\n    public class ProjectMappingProfile : Profile\r\n    {\r\n        public ProjectMappingProfile()\r\n        {\r\n            // Patient //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<CreatePatientViewModel, CreatePatientDTO>()\r\n                .ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)))\r\n                .ForMember(dest => dest.Documents, opt => opt.MapFrom(src =>\r\n                    src.Documents.ToDictionary(\r\n                        kvp => kvp.Key,\r\n                        kvp => new DocumentDTO\r\n                        {\r\n                            Type = kvp.Key,\r\n                            // Селективная обработка форматов документов\r\n                            Number = FormatDocumentNumber(kvp.Key, kvp.Value.Number)\r\n                        }\r\n                    )))\r\n                // ВАЖНО: Если пациент НЕ получает пенсию, то данные о пенсии должны быть null\r\n                .ForMember(dest => dest.Pension, opt => opt.MapFrom(src => \r\n                    src.ReceivesPension ? src.Pension : null))\r\n                // ВАЖНО: Если пациент дееспособен, то Capable должен быть null\r\n                .ForMember(dest => dest.Capable, opt => opt.MapFrom(src => \r\n                    src.IsCapable ? null : src.Capable))\r\n                // ВАЖНО: Передаем ReceivesPension для корректной обработки\r\n                .ForMember(dest => dest.ReceivesPension, opt => opt.MapFrom(src => src.ReceivesPension));\r\n\r\n            CreateMap<EditPatientViewModel, EditPatientDTO>()\r\n                //.ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                //    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)))\r\n                .ForMember(dest => dest.Documents, opt => opt.MapFrom(src =>\r\n                    src.Documents.ToDictionary(\r\n                        kvp => kvp.Key,\r\n                        kvp => new DocumentDTO\r\n                        {\r\n                            Type = kvp.Key,\r\n                            // Селективная обработка форматов документов\r\n                            Number = FormatDocumentNumber(kvp.Key, kvp.Value.Number)\r\n                        }\r\n                    )));\r\n\r\n            CreateMap<Patient, EditPatientDTO>()\r\n                .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => src.FullName))\r\n                //.ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                //    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)))\r\n                .ForMember(dest => dest.ActiveMedicalHistory, opt => opt.MapFrom(src => new MedicalHistoryDTO\r\n                {\r\n                    NumberDepartment = (sbyte)(src.ActiveHistory != null ? src.ActiveHistory.NumberDepartment : 0),\r\n                    HospitalizationType = new HospitalizationTypeDTO\r\n                    {\r\n                        Value = (byte)(src.ActiveHistory != null && src.ActiveHistory.HospitalizationType != null ? src.ActiveHistory.HospitalizationType.Value : 0),\r\n                        DisplayName = src.ActiveHistory != null && src.ActiveHistory.HospitalizationType != null ? src.ActiveHistory.HospitalizationType.DisplayName : string.Empty\r\n                    },\r\n                    Resolution = src.ActiveHistory != null ? src.ActiveHistory.Resolution : string.Empty,\r\n                    NumberDocument = src.ActiveHistory != null ? src.ActiveHistory.NumberDocument : string.Empty,\r\n                    DateOfReceipt = src.ActiveHistory != null ? DateTime.SpecifyKind(src.ActiveHistory.DateOfReceipt, DateTimeKind.Utc) : DateTime.MinValue,\r\n                    DateOfDischarge = src.ActiveHistory != null && src.ActiveHistory.DateOfDischarge.HasValue ? DateTime.SpecifyKind(src.ActiveHistory.DateOfDischarge.Value, DateTimeKind.Utc) : null,\r\n                    Note = src.ActiveHistory != null ? src.ActiveHistory.Note : null\r\n                }))\r\n                .ForMember(dest => dest.CitizenshipInfo, opt => opt.MapFrom(src => new CitizenshipInfoDTO\r\n                {\r\n                    Citizenship = src.CitizenshipInfo != null ? src.CitizenshipInfo.Citizenship : CitizenshipType.RussianFederation,\r\n                    Country = src.CitizenshipInfo != null ? src.CitizenshipInfo.Country : string.Empty,\r\n                    Registration = src.CitizenshipInfo != null ? src.CitizenshipInfo.Registration : string.Empty,\r\n                    EarlyRegistration = src.CitizenshipInfo != null ? src.CitizenshipInfo.EarlyRegistration : null,\r\n                    PlaceOfBirth = src.CitizenshipInfo != null ? src.CitizenshipInfo.PlaceOfBirth : null,\r\n                    DocumentAttached = src.CitizenshipInfo != null ? src.CitizenshipInfo.DocumentAttached : null\r\n                }))\r\n                .ForMember(dest => dest.Documents, opt => opt.MapFrom(src => \r\n                    src.Documents.ToDictionary(\r\n                        kvp => kvp.Key,\r\n                        kvp => new DocumentDTO\r\n                        {\r\n                            Type = kvp.Key,\r\n                            Number = ExtractDocumentNumber(kvp.Value)\r\n                        }\r\n                    )))\r\n                .ForMember(dest => dest.Capable, opt => opt.MapFrom(src => src.Capable != null ? new EditCapableDTO\r\n                {\r\n                    Guardian = src.Capable.Guardian != null ? src.Capable.Guardian : string.Empty,\r\n                    GuardianOrderAppointment = src.Capable.GuardianOrderAppointment != null ? src.Capable.GuardianOrderAppointment : string.Empty\r\n                } : null))\r\n                .ForMember(dest => dest.Pension, opt => opt.MapFrom(src => src.Pension != null ? new PensionDTO\r\n                {\r\n                    DisabilityGroup = src.Pension.DisabilityGroup,\r\n                    PensionStartDateTime = src.Pension.PensionStartDateTime.HasValue ? DateTime.SpecifyKind(src.Pension.PensionStartDateTime.Value, DateTimeKind.Utc) : null,\r\n                    PensionAddress = src.Pension.PensionAddress,\r\n                    SfrBranch = src.Pension.SfrBranch,\r\n                    SfrDepartment = src.Pension.SfrDepartment,\r\n                    Rsd = src.Pension.Rsd\r\n                } : null))\r\n                .ForMember(dest => dest.Note, opt => opt.MapFrom(src => src.Note));\r\n\r\n            CreateMap<Patient, CreatePatientDTO>()\r\n                .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => src.FullName))\r\n                .ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)))\r\n                .ForMember(dest => dest.MedicalHistory, opt => opt.MapFrom(src => new MedicalHistoryDTO\r\n                {\r\n                    NumberDepartment = (sbyte)(src.ActiveHistory != null ? src.ActiveHistory.NumberDepartment : 0),\r\n                    HospitalizationType = new HospitalizationTypeDTO\r\n                    {\r\n                        Value = (byte)(src.ActiveHistory != null && src.ActiveHistory.HospitalizationType != null ? src.ActiveHistory.HospitalizationType.Value : 0),\r\n                        DisplayName = src.ActiveHistory != null && src.ActiveHistory.HospitalizationType != null ? src.ActiveHistory.HospitalizationType.DisplayName : string.Empty\r\n                    },\r\n                    Resolution = src.ActiveHistory != null ? src.ActiveHistory.Resolution : string.Empty,\r\n                    NumberDocument = src.ActiveHistory != null ? src.ActiveHistory.NumberDocument : string.Empty,\r\n                    DateOfReceipt = src.ActiveHistory != null ? DateTime.SpecifyKind(src.ActiveHistory.DateOfReceipt, DateTimeKind.Utc) : DateTime.MinValue,\r\n                    DateOfDischarge = src.ActiveHistory != null && src.ActiveHistory.DateOfDischarge.HasValue ? DateTime.SpecifyKind(src.ActiveHistory.DateOfDischarge.Value, DateTimeKind.Utc) : null,\r\n                    Note = src.ActiveHistory != null ? src.ActiveHistory.Note : null\r\n                }))\r\n                .ForMember(dest => dest.CitizenshipInfo, opt => opt.MapFrom(src => new CitizenshipInfoDTO\r\n                {\r\n                    Citizenship = src.CitizenshipInfo != null ? src.CitizenshipInfo.Citizenship : CitizenshipType.RussianFederation,\r\n                    Country = src.CitizenshipInfo != null ? src.CitizenshipInfo.Country : string.Empty,\r\n                    Registration = src.CitizenshipInfo != null ? src.CitizenshipInfo.Registration : string.Empty,\r\n                    EarlyRegistration = src.CitizenshipInfo != null ? src.CitizenshipInfo.EarlyRegistration : null,\r\n                    PlaceOfBirth = src.CitizenshipInfo != null ? src.CitizenshipInfo.PlaceOfBirth : null,\r\n                    DocumentAttached = src.CitizenshipInfo != null ? src.CitizenshipInfo.DocumentAttached : null\r\n                }))\r\n                .ForMember(dest => dest.Documents, opt => opt.MapFrom(src => \r\n                    src.Documents.ToDictionary(\r\n                        kvp => kvp.Key,\r\n                        kvp => new DocumentDTO\r\n                        {\r\n                            Type = kvp.Key,\r\n                            Number = ExtractDocumentNumber(kvp.Value)\r\n                        }\r\n                    )))\r\n                .ForMember(dest => dest.IsCapable, opt => opt.MapFrom(src => src.IsCapable))\r\n                .ForMember(dest => dest.Capable, opt => opt.MapFrom(src => src.Capable != null ? new CreateCapableDTO\r\n                {\r\n                    CourtDecision = src.Capable.CourtDecision != null ? src.Capable.CourtDecision : string.Empty,\r\n                    TrialDate = src.Capable.TrialDate.HasValue ? DateTime.SpecifyKind(src.Capable.TrialDate.Value, DateTimeKind.Utc) : null,\r\n                    Guardian = src.Capable.Guardian != null ? src.Capable.Guardian : string.Empty,\r\n                    GuardianOrderAppointment = src.Capable.GuardianOrderAppointment != null ? src.Capable.GuardianOrderAppointment : string.Empty\r\n                } : null))\r\n                .ForMember(dest => dest.ReceivesPension, opt => opt.MapFrom(src => src.ReceivesPension))\r\n                .ForMember(dest => dest.Pension, opt => opt.MapFrom(src => src.Pension != null ? new PensionDTO\r\n                {\r\n                    DisabilityGroup = src.Pension.DisabilityGroup,\r\n                    PensionStartDateTime = src.Pension.PensionStartDateTime.HasValue ? DateTime.SpecifyKind(src.Pension.PensionStartDateTime.Value, DateTimeKind.Utc) : null,\r\n                    PensionAddress = src.Pension.PensionAddress,\r\n                    SfrBranch = src.Pension.SfrBranch,\r\n                    SfrDepartment = src.Pension.SfrDepartment,\r\n                    Rsd = src.Pension.Rsd\r\n                } : null))\r\n                .ForMember(dest => dest.Note, opt => opt.MapFrom(src => src.Note));\r\n\r\n            //По лучшим практикам, процесс маппинга из DTO -> Entity, должен осуществляться в ручную.\r\n            //CreateMap<EditPatientDTO, Patient>()\r\n            //.ForMember(dest => dest.Documents, opt => opt.MapFrom(src => \r\n            //    src.Documents.ToDictionary(\r\n            //        kvp => kvp.Key,\r\n            //        kvp => DocumentFactory.Create(\r\n            //            kvp.Value.Type,\r\n            //            kvp.Value.Number\r\n            //        )\r\n            //    )));\r\n\r\n            CreateMap<EditPatientViewModel, EditPatientDTO>();\r\n            CreateMap<CreateUserViewModel, CreateUserDTO>();\r\n            CreateMap<EditUserViewModel, CreateUserDTO>();\r\n            CreateMap<IUser, UserDTO>();\r\n            CreateMap<ApplicationUser, UserDTO>();\r\n            CreateMap<CreateAssignmentViewModel, CreateOrEditAssignmentDto>();\r\n            \r\n            // Маппинг для пользователей\r\n            CreateMap<ApplicationUser, EditUserViewModel>()\r\n                .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.UserName))\r\n                .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.FirstName))\r\n                .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => src.LastName))\r\n                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))\r\n                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role))\r\n                .ForMember(dest => dest.Position, opt => opt.MapFrom(src => src.Position))\r\n                .ForMember(dest => dest.DepartmentNumber, opt => opt.MapFrom(src => src.DepartmentNumber))\r\n                .ForMember(dest => dest.Password, opt => opt.Ignore()) // Пароль не маппим из базы\r\n                .ForMember(dest => dest.ConfirmPassword, opt => opt.Ignore()); // Подтверждение пароля не маппим из базы\r\n                \r\n            CreateMap<UserDTO, EditUserViewModel>()\r\n                .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.UserName))\r\n                .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.FirstName))\r\n                .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => src.LastName))\r\n                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))\r\n                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role))\r\n                .ForMember(dest => dest.Position, opt => opt.MapFrom(src => src.Position))\r\n                .ForMember(dest => dest.DepartmentNumber, opt => opt.MapFrom(src => src.DepartmentNumber))\r\n                .ForMember(dest => dest.Password, opt => opt.Ignore()) // Пароль не маппим из DTO\r\n                .ForMember(dest => dest.ConfirmPassword, opt => opt.Ignore()); // Подтверждение пароля не маппим из DTO\r\n\r\n            // Маппинг для ролей\r\n            CreateMap<CreateRoleViewModel, CreateRoleDTO>()\r\n                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name));\r\n            CreateMap<EditRoleViewModel, CreateRoleDTO>()\r\n                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name));\r\n            CreateMap<IRole, RoleDTO>()\r\n                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => Guid.Empty))\r\n                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))\r\n                .ForMember(dest => dest.NormalizedName, opt => opt.MapFrom(src => src.Name.ToUpperInvariant()))\r\n                .ForMember(dest => dest.CreatedOn, opt => opt.MapFrom(src => DateTime.UtcNow));\r\n            CreateMap<ApplicationRole, RoleDTO>()\r\n                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))\r\n                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))\r\n                .ForMember(dest => dest.NormalizedName, opt => opt.MapFrom(src => src.NormalizedName))\r\n                .ForMember(dest => dest.CreatedOn, opt => opt.MapFrom(src => src.CreatedOn));\r\n            CreateMap<RoleDTO, EditRoleViewModel>()\r\n                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))\r\n                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name));\r\n\r\n            // Маппинг DTO в ViewModels с правильной обработкой дат\r\n            CreateMap<CreatePatientDTO, CreatePatientViewModel>()\r\n                .ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)));\r\n\r\n            CreateMap<EditPatientDTO, EditPatientViewModel>();\r\n                //.ForMember(dest => dest.Birthday, opt => opt.MapFrom(src => \r\n                //    DateTime.SpecifyKind(src.Birthday, DateTimeKind.Utc)));\r\n\r\n            // ❗ КРИТИЧЕСКИ ВАЖНЫЕ МАППИНГИ ДЛЯ ViewModel -> DTO ❗ //\r\n            \r\n            // MedicalHistory (ViewModel) -> MedicalHistoryDTO\r\n            CreateMap<MedicalHistoryModel, MedicalHistoryDTO>()\r\n                .ForMember(dest => dest.DateOfReceipt, opt => opt.MapFrom(src => \r\n                    DateTime.SpecifyKind(src.DateOfReceipt, DateTimeKind.Utc)))\r\n                .ForMember(dest => dest.DateOfDischarge, opt => opt.MapFrom(src => \r\n                    src.DateOfDischarge.HasValue ? DateTime.SpecifyKind(src.DateOfDischarge.Value, DateTimeKind.Utc) : (DateTime?)null))\r\n                .ForMember(dest => dest.HospitalizationType, opt => opt.MapFrom(src => \r\n                    src.HospitalizationType != null \r\n                        ? new HospitalizationTypeDTO\r\n                        {\r\n                            Value = src.HospitalizationType.Value,\r\n                            DisplayName = src.HospitalizationType.DisplayName\r\n                        }\r\n                        : new HospitalizationTypeDTO  // Значение по умолчанию\r\n                        {\r\n                            Value = 1,  // Force\r\n                            DisplayName = \"Принудительно\"\r\n                        }));\r\n\r\n            // CitizenshipInfo (ViewModel) -> CitizenshipInfoDTO\r\n            CreateMap<CitizenshipInfoModel, CitizenshipInfoDTO>()\r\n                .ForMember(dest => dest.Citizenship, opt => opt.MapFrom(src => \r\n                    src.Citizenship != null ? src.Citizenship : CitizenshipType.RussianFederation)) // Значение по умолчанию\r\n                .ForMember(dest => dest.Country, opt => opt.MapFrom(src => src.Country))\r\n                .ForMember(dest => dest.Registration, opt => opt.MapFrom(src => src.Registration))\r\n                .ForMember(dest => dest.EarlyRegistration, opt => opt.MapFrom(src => src.EarlyRegistration))\r\n                .ForMember(dest => dest.PlaceOfBirth, opt => opt.MapFrom(src => src.PlaceOfBirth))\r\n                .ForMember(dest => dest.DocumentAttached, opt => opt.MapFrom(src => src.DocumentAttached));\r\n\r\n            // Capable (ViewModel) -> CreateCapableDTO/EditCapableDTO\r\n            CreateMap<CapableModel, CreateCapableDTO>()\r\n                .ForMember(dest => dest.TrialDate, opt => opt.MapFrom(src => \r\n                    src.TrialDate.HasValue ? DateTime.SpecifyKind(src.TrialDate.Value, DateTimeKind.Utc) : (DateTime?)null));\r\n            CreateMap<CapableModel, EditCapableDTO>()\r\n                .ForMember(dest => dest.TrialDate, opt => opt.MapFrom(src => \r\n                    src.TrialDate.HasValue ? DateTime.SpecifyKind(src.TrialDate.Value, DateTimeKind.Utc) : (DateTime?)null));\r\n\r\n            // Pension (ViewModel) -> PensionDTO\r\n            CreateMap<PensionModel, PensionDTO>()\r\n                .ForMember(dest => dest.PensionStartDateTime, opt => opt.MapFrom(src => \r\n                    src.PensionStartDateTime.HasValue ? DateTime.SpecifyKind(src.PensionStartDateTime.Value, DateTimeKind.Utc) : (DateTime?)null));\r\n\r\n            // HospitalizationType //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<byte, HospitalizationType>().ConvertUsing(value => HospitalizationType.FromValue(value));\r\n            CreateMap<HospitalizationType, byte>().ConvertUsing(hospitalizationType => hospitalizationType.Value);\r\n\r\n            // CitizenshipInfo ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<CitizenshipInfoDTO, CitizenshipInfo>().ReverseMap();\r\n\r\n            // CitizenshipType ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<byte, CitizenshipType>().ConvertUsing(value => CitizenshipType.FromValue(value));\r\n            CreateMap<CitizenshipType, byte>().ConvertUsing(citizenshipType => citizenshipType.Value);\r\n\r\n            // Capable //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<CreateCapableDTO, Capable>()\r\n                .ConstructUsing(src => new Capable(\r\n                    src.CourtDecision,\r\n                    src.TrialDate.HasValue ? DateTime.SpecifyKind(src.TrialDate.Value, DateTimeKind.Utc) : null,\r\n                    src.Guardian,\r\n                    src.GuardianOrderAppointment));\r\n\r\n            CreateMap<EditCapableDTO, Capable>()\r\n                .ForMember(dest => dest.CourtDecision, opt => opt.Ignore())\r\n                .ForMember(dest => dest.TrialDate, opt => opt.Ignore())\r\n                .ConstructUsing((src, ctx) =>\r\n                {\r\n                    var existingCapable = ctx.Items[\"ExistingCapable\"] as Capable;\r\n                    return new Capable(\r\n                        existingCapable!.CourtDecision,\r\n                        existingCapable!.TrialDate.HasValue ? DateTime.SpecifyKind(existingCapable.TrialDate.Value, DateTimeKind.Utc) : null,\r\n                        src.Guardian,\r\n                        src.GuardianOrderAppointment);\r\n                });\r\n\r\n            // City //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<byte, CityType>().ConvertUsing(value => CityType.FromValue(value));\r\n            CreateMap<CityType, byte>().ConvertUsing(city => city.Value);\r\n\r\n            // DisabilityGroup ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<byte, DisabilityGroupType>().ConvertUsing(value => DisabilityGroupType.FromValue(value));\r\n            CreateMap<DisabilityGroupType, byte>().ConvertUsing(disabilityGroup => disabilityGroup.Value);\r\n\r\n            // Pension ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<PensionDTO, Pension>()\r\n                .ForMember(dest => dest.PensionStartDateTime, opt => opt.MapFrom(src => \r\n                    src.PensionStartDateTime.HasValue ? DateTime.SpecifyKind(src.PensionStartDateTime.Value, DateTimeKind.Utc) : (DateTime?)null));\r\n\r\n            // PensionAddress ////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<byte, PensionAddressType>().ConvertUsing(value => PensionAddressType.FromValue(value));\r\n            CreateMap<PensionAddressType, byte>().ConvertUsing(pensionAddress => pensionAddress.Value);\r\n\r\n            // Assignment ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<Assignment, CreateOrEditAssignmentDto>();\r\n\r\n            CreateMap<Patient, ActivePatientDTO>()\r\n                .ForMember(dest => dest.HospitalizationType, opt => opt.MapFrom(src =>\r\n                    src.ActiveHistory != null && src.ActiveHistory.HospitalizationType != null\r\n                        ? src.ActiveHistory.HospitalizationType.DisplayName\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.CourtDecision, opt => opt.MapFrom(src =>\r\n                    src.Capable != null && !string.IsNullOrEmpty(src.Capable.CourtDecision)\r\n                        ? src.Capable.CourtDecision\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.NumberDocument, opt => opt.MapFrom(src =>\r\n                    src.ActiveHistory != null && !string.IsNullOrEmpty(src.ActiveHistory.NumberDocument)\r\n                        ? src.ActiveHistory.NumberDocument\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.DateOfReceipt, opt => opt.MapFrom(src =>\r\n                    src.ActiveHistory != null ? DateTime.SpecifyKind(src.ActiveHistory.DateOfReceipt, DateTimeKind.Utc) : DateTime.MinValue))\r\n                .ForMember(dest => dest.Department, opt => opt.MapFrom(src =>\r\n                    src.ActiveHistory != null && src.ActiveHistory.NumberDepartment.HasValue\r\n                        ? src.ActiveHistory.NumberDepartment.Value.ToString()\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.IsChildren, opt => opt.MapFrom(src => src.IsChildren))\r\n                .ForMember(dest => dest.Citizenship, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && src.CitizenshipInfo.Citizenship != null\r\n                        ? src.CitizenshipInfo.Citizenship.DisplayName\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.Country, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && !string.IsNullOrEmpty(src.CitizenshipInfo.Country)\r\n                        ? src.CitizenshipInfo.Country\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.Registration, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && !string.IsNullOrEmpty(src.CitizenshipInfo.Registration)\r\n                        ? src.CitizenshipInfo.Registration\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.IsHomeless, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && src.CitizenshipInfo.NotRegistered\r\n                        ? true\r\n                        : false))\r\n                .ForMember(dest => dest.EarlyRegistration, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && src.CitizenshipInfo.EarlyRegistration != null\r\n                        ? src.CitizenshipInfo.EarlyRegistration.DisplayName\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.PlaceOfBirth, opt => opt.MapFrom(src =>\r\n                    src.CitizenshipInfo != null && !string.IsNullOrEmpty(src.CitizenshipInfo.PlaceOfBirth)\r\n                        ? src.CitizenshipInfo.PlaceOfBirth\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.IsCapable, opt => opt.MapFrom(src => src.IsCapable))\r\n                .ForMember(dest => dest.ReceivesPension, opt => opt.MapFrom(src => src.ReceivesPension))\r\n                .ForMember(dest => dest.DisabilityGroup, opt => opt.MapFrom(src =>\r\n                    src.Pension != null && src.Pension.DisabilityGroup != null && src.Pension.DisabilityGroup.Value > 0\r\n                        ? src.Pension.DisabilityGroup.Value.ToString()\r\n                        : \"—\"))\r\n                .ForMember(dest => dest.Note, opt => opt.MapFrom(src =>\r\n                    !string.IsNullOrEmpty(src.Note)\r\n                        ? src.Note\r\n                        : \"—\"));\r\n\r\n            // UserActivityLog ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            CreateMap<UserActivityLog, UserActivityLogDTO>()\r\n                .ForMember(dest => dest.ActivityTypeName, opt => opt.MapFrom(src => \r\n                    GetActivityTypeName(src.ActivityType)))\r\n                .ForMember(dest => dest.FormattedTimestamp, opt => opt.MapFrom(src => \r\n                    src.Timestamp.ToString(\"dd.MM.yyyy HH:mm:ss\")));\r\n\r\n            CreateMap<UserActivityLogFilterViewModel, UserActivityLogFilterDTO>().ReverseMap();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Получает название типа активности\r\n        /// </summary>\r\n        /// <param name=\"activityType\">Тип активности</param>\r\n        /// <returns>Название типа активности</returns>\r\n        private static string GetActivityTypeName(UserActivityType activityType)\r\n        {\r\n            return activityType switch\r\n            {\r\n                UserActivityType.Login => \"Авторизация\",\r\n                UserActivityType.Logout => \"Выход\",\r\n                UserActivityType.DataRequest => \"Запрос данных\",\r\n                UserActivityType.Create => \"Создание\",\r\n                UserActivityType.Update => \"Редактирование\",\r\n                UserActivityType.Delete => \"Удаление\",\r\n                _ => activityType.ToString()\r\n            };\r\n        }\r\n\r\n        /// <summary>\r\n        /// Извлекает номер документа из object в Dictionary\r\n        /// </summary>\r\n        /// <param name=\"document\">Документ как object</param>\r\n        /// <returns>Номер документа или пустая строка</returns>\r\n        private static string ExtractDocumentNumber(object document)\r\n        {\r\n            if (document == null) return string.Empty;\r\n            \r\n            if (document is PassportDocument passport)\r\n                return passport.Number != null ? passport.Number : string.Empty;\r\n            if (document is MedicalPolicyDocument policy)\r\n                return policy.Number != null ? policy.Number : string.Empty;\r\n            if (document is SnilsDocument snils)\r\n                return snils.Number != null ? snils.Number : string.Empty;\r\n            \r\n            return string.Empty;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Форматирует номер документа в зависимости от его типа\r\n        /// </summary>\r\n        /// <param name=\"documentType\">Тип документа</param>\r\n        /// <param name=\"number\">Номер документа от пользователя</param>\r\n        /// <returns>Отформатированный номер для хранения в базе</returns>\r\n        private static string FormatDocumentNumber(DocumentType documentType, string? number)\r\n        {\r\n            if (string.IsNullOrEmpty(number))\r\n                return string.Empty;\r\n\r\n            return documentType switch\r\n            {\r\n                var dt when dt == DocumentType.Passport => number,\r\n                var dt when dt == DocumentType.MedicalPolicy => number.Replace(\" \", \"\"),\r\n                var dt when dt == DocumentType.Snils => number,\r\n                _ => number\r\n            };\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/MappingProfile/ProjectMappingProfile.cs b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/MappingProfile/ProjectMappingProfile.cs
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/MappingProfile/ProjectMappingProfile.cs	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/MappingProfile/ProjectMappingProfile.cs	(date 1756983352370)
@@ -179,6 +179,7 @@
             CreateMap<IUser, UserDTO>();
             CreateMap<ApplicationUser, UserDTO>();
             CreateMap<CreateAssignmentViewModel, CreateOrEditAssignmentDto>();
+            CreateMap<EditAssignmentViewModel, CreateOrEditAssignmentDto>();
             
             // Маппинг для пользователей
             CreateMap<ApplicationUser, EditUserViewModel>()
Index: src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.ComponentModel.DataAnnotations;\r\n\r\nnamespace CRM.SocialDepartment.Site.ViewModels.Assignment\r\n{\r\n    public class EditAssignmentViewModel\r\n    {\r\n        [Required]\r\n        public Guid Id { get; set; }\r\n\r\n        [Required, StringLength(256)]\r\n        public string Name { get; set; } = string.Empty;\r\n\r\n        [StringLength(4000)]\r\n        public string? Description { get; set; }\r\n\r\n        [Display(Name = \"Создано\")]\r\n        public DateTime CreatedDate { get; set; }\r\n\r\n        [Display(Name = \"Кому передано\")]\r\n        public string? ForwardDepartment { get; set; }\r\n\r\n        [Display(Name = \"Исполнитель\")]\r\n        public string? Assignee { get; set; }\r\n\r\n        [Display(Name = \"Дата принятия\")]\r\n        public DateTime AcceptDate { get; set; }\r\n\r\n        [Display(Name = \"Дата передачи\")]\r\n        public DateTime ForwardDate { get; set; }\r\n\r\n        [Display(Name = \"Номер отделения\")]\r\n        public int DepartmentNumber { get; set; }\r\n\r\n        [Display(Name = \"Дата передачи в отделение\")]\r\n        public DateTime DepartmentForwardDate { get; set; }\r\n\r\n        [Display(Name = \"Заметка\")]\r\n        public string? Note { get; set; }\r\n\r\n        [Required]\r\n        public Guid PatientId { get; set; }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.cs b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.cs
--- a/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.cs	(revision 1f8fee95001fe8134ec947ef163da438a8a34e5a)
+++ b/src/CRM.SocialDepartment.Presentation/CRM.SocialDepartment.Site/ViewModels/Assignment/EditAssignmentViewModel.cs	(date 1756983959363)
@@ -1,17 +1,22 @@
+using System.ComponentModel;
 using System.ComponentModel.DataAnnotations;
 
 namespace CRM.SocialDepartment.Site.ViewModels.Assignment
 {
-    public class EditAssignmentViewModel
+    public partial class EditAssignmentViewModel : IValidatableObject
     {
         [Required]
         public Guid Id { get; set; }
 
-        [Required, StringLength(256)]
+        [Required(ErrorMessage = "Название обязательно для заполнения")]
+        [DisplayName("Название")]
+        [StringLength(256)]
         public string Name { get; set; } = string.Empty;
 
+        [Required(ErrorMessage = "Описание обязательно для заполнения")]
+        [DisplayName("Описание")]
         [StringLength(4000)]
-        public string? Description { get; set; }
+        public string Description { get; set; } = string.Empty;
 
         [Display(Name = "Создано")]
         public DateTime CreatedDate { get; set; }
