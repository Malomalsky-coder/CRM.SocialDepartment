using CRM.SocialDepartment.Domain.Common;
using CRM.SocialDepartment.Domain.Entities;
using CRM.SocialDepartment.Domain.Repositories;
using MongoDB.Driver;

namespace CRM.SocialDepartment.Infrastructure.DataAccess.MongoDb.Repositories
{
    /// <summary>
    /// MongoDB —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    /// </summary>
    public class MongoAssignmentRepository : MongoBasicRepository<Assignment, Guid>, IAssignmentRepository
    {
        public MongoAssignmentRepository(IMongoDatabase database) : base(database, "assignments")
        {
        }

        public MongoAssignmentRepository(IMongoDatabase database, IClientSessionHandle? session) : base(database, "assignments", session)
        {
        }

        /// <summary>
        /// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ MongoDB
        /// </summary>
        /// <param name="input">–í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞</param>
        /// <returns>–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞</returns>
        private static string EscapeRegexSpecialCharacters(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            // –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
            var specialChars = new[] { '\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '[', ']', '{', '}', '/' };
            
            var result = input;
            foreach (var specialChar in specialChars)
            {
                result = result.Replace(specialChar.ToString(), "\\" + specialChar);
            }
            
            return result;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        /// </summary>
        /// <param name="searchTerm">–ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω</param>
        /// <returns>–§–∏–ª—å—Ç—Ä MongoDB</returns>
        private static FilterDefinition<Assignment> CreateSafeSearchFilter(string searchTerm)
        {
            if (string.IsNullOrEmpty(searchTerm))
                return Builders<Assignment>.Filter.Empty;

            try
            {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                var escapedSearchTerm = EscapeRegexSpecialCharacters(searchTerm.Trim());
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (case-insensitive)
                var regexPattern = new MongoDB.Bson.BsonRegularExpression(escapedSearchTerm, "i");
                
                var descriptionFilter = Builders<Assignment>.Filter.Regex(a => a.Description, regexPattern);
                var assigneeFilter = Builders<Assignment>.Filter.Regex(a => a.Assignee, regexPattern);
                
                return Builders<Assignment>.Filter.Or(descriptionFilter, assigneeFilter);
            }
            catch (Exception ex)
            {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
                Console.WriteLine($"‚ö†Ô∏è [MongoAssignmentRepository] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è regex –¥–ª—è –ø–æ–∏—Å–∫–∞: {ex.Message}");
                
                // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Contains (–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
                var lowerSearchTerm = searchTerm.ToLower();
                return Builders<Assignment>.Filter.Where(a => 
                    a.Description.ToLower().Contains(lowerSearchTerm) || 
                    a.Assignee.ToLower().Contains(lowerSearchTerm));
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –≤ –∞—Ä—Ö–∏–≤–µ)
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetActiveAssignmentsAsync(CancellationToken cancellationToken = default)
        {
            return await GetAllAsync(a => !a.IsArchive && !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç–¥–µ–ª–µ–Ω–∏—è
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetAssignmentsByDepartmentAsync(int departmentNumber, CancellationToken cancellationToken = default)
        {
            return await GetAllAsync(a => a.DepartmentNumber == departmentNumber && !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetAssignmentsByPatientIdAsync(Guid patientId, CancellationToken cancellationToken = default)
        {
            return await GetAllAsync(a => a.Patient.Id == patientId && !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetAssignmentsByAssigneeAsync(string assignee, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(assignee))
                return Enumerable.Empty<Assignment>();

            return await GetAllAsync(a => a.Assignee.Contains(assignee) && !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetArchivedAssignmentsAsync(CancellationToken cancellationToken = default)
        {
            return await GetAllAsync(a => a.IsArchive && !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
        /// </summary>
        public async Task<IEnumerable<Assignment>> GetAssignmentsByDateRangeAsync(DateTime startDate, DateTime endDate, CancellationToken cancellationToken = default)
        {
            return await GetAllAsync(a => a.CreationDate >= startDate && 
                                         a.CreationDate <= endDate && 
                                         !a.SoftDeleted, cancellationToken);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è DataTables —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        /// </summary>
        public async Task<DataTableResult<Assignment>> GetActiveAssignmentsForDataTableAsync(DataTableParameters parameters, CancellationToken cancellationToken = default)
        {
            var collection = GetCollection();

            try
            {
                // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
                var baseFilter = Builders<Assignment>.Filter.And(
                    Builders<Assignment>.Filter.Eq(a => a.SoftDeleted, false),
                    Builders<Assignment>.Filter.Eq(a => a.IsArchive, false)
                );

                // –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                var searchFilter = baseFilter;
                if (!string.IsNullOrEmpty(parameters.SearchTerm))
                {
                    var nameFilter = CreateSafeSearchFilter(parameters.SearchTerm);
                    searchFilter = Builders<Assignment>.Filter.And(baseFilter, nameFilter);
                }

                // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                var totalRecords = _session != null 
                    ? await collection.CountDocumentsAsync(_session, baseFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(baseFilter, cancellationToken: cancellationToken);

                // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                var filteredRecords = _session != null
                    ? await collection.CountDocumentsAsync(_session, searchFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(searchFilter, cancellationToken: cancellationToken);

                // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                var assignments = _session != null
                    ? await collection.Find(_session, searchFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken)
                    : await collection.Find(searchFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken);

                return new DataTableResult<Assignment>
                {
                    TotalRecords = totalRecords,
                    FilteredRecords = filteredRecords,
                    Data = assignments
                };
            }
            catch (MongoDB.Driver.MongoCommandException ex) when (ex.Message.Contains("Regular expression is invalid"))
            {
                Console.WriteLine($"üö® [MongoAssignmentRepository] –û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {ex.Message}");
                Console.WriteLine($"üìù –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω: '{parameters.SearchTerm}'");
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ regex
                var fallbackFilter = Builders<Assignment>.Filter.And(
                    Builders<Assignment>.Filter.Eq(a => a.SoftDeleted, false),
                    Builders<Assignment>.Filter.Eq(a => a.IsArchive, false)
                );

                var totalRecords = _session != null 
                    ? await collection.CountDocumentsAsync(_session, fallbackFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(fallbackFilter, cancellationToken: cancellationToken);

                var assignments = _session != null
                    ? await collection.Find(_session, fallbackFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken)
                    : await collection.Find(fallbackFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken);

                return new DataTableResult<Assignment>
                {
                    TotalRecords = totalRecords,
                    FilteredRecords = totalRecords,
                    Data = assignments
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üö® [MongoAssignmentRepository] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {ex.Message}");
                throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è DataTables —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        /// </summary>
        public async Task<DataTableResult<Assignment>> GetArchivedAssignmentsForDataTableAsync(DataTableParameters parameters, CancellationToken cancellationToken = default)
        {
            var collection = GetCollection();

            try
            {
                // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
                var baseFilter = Builders<Assignment>.Filter.And(
                    Builders<Assignment>.Filter.Eq(a => a.SoftDeleted, false),
                    Builders<Assignment>.Filter.Eq(a => a.IsArchive, true)
                );

                // –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                var searchFilter = baseFilter;
                if (!string.IsNullOrEmpty(parameters.SearchTerm))
                {
                    var nameFilter = CreateSafeSearchFilter(parameters.SearchTerm);
                    searchFilter = Builders<Assignment>.Filter.And(baseFilter, nameFilter);
                }

                // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                var totalRecords = _session != null 
                    ? await collection.CountDocumentsAsync(_session, baseFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(baseFilter, cancellationToken: cancellationToken);

                // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                var filteredRecords = _session != null
                    ? await collection.CountDocumentsAsync(_session, searchFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(searchFilter, cancellationToken: cancellationToken);

                // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                var assignments = _session != null
                    ? await collection.Find(_session, searchFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken)
                    : await collection.Find(searchFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken);

                return new DataTableResult<Assignment>
                {
                    TotalRecords = totalRecords,
                    FilteredRecords = filteredRecords,
                    Data = assignments
                };
            }
            catch (MongoDB.Driver.MongoCommandException ex) when (ex.Message.Contains("Regular expression is invalid"))
            {
                Console.WriteLine($"üö® [MongoAssignmentRepository] –û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {ex.Message}");
                Console.WriteLine($"üìù –ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω: '{parameters.SearchTerm}'");
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ regex
                var fallbackFilter = Builders<Assignment>.Filter.And(
                    Builders<Assignment>.Filter.Eq(a => a.SoftDeleted, false),
                    Builders<Assignment>.Filter.Eq(a => a.IsArchive, true)
                );

                var totalRecords = _session != null 
                    ? await collection.CountDocumentsAsync(_session, fallbackFilter, cancellationToken: cancellationToken)
                    : await collection.CountDocumentsAsync(fallbackFilter, cancellationToken: cancellationToken);

                var assignments = _session != null
                    ? await collection.Find(_session, fallbackFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken)
                    : await collection.Find(fallbackFilter)
                        .Skip(parameters.Skip)
                        .Limit(parameters.PageSize)
                        .ToListAsync(cancellationToken);

                return new DataTableResult<Assignment>
                {
                    TotalRecords = totalRecords,
                    FilteredRecords = totalRecords,
                    Data = assignments
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üö® [MongoAssignmentRepository] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {ex.Message}");
                throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
            }
        }
    }
} 