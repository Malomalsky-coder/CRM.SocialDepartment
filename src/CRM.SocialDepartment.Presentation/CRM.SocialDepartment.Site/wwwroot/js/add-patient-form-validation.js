// add-patient-form-validation.js
// –ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞"

(function(global) {
    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    function clearValidationErrors() {
        $('.form-control, .form-select').removeClass('is-invalid');
        $('.invalid-feedback, .text-danger.field-validation-error').remove();
        $('.validation-errors').remove();
        $('.alert-danger').remove();
    }

    function addFieldErrorMessage($field, errorMessage) {
        $field.siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
        const $errorSpan = $('<span class="text-danger field-validation-error"></span>');
        $errorSpan.text(errorMessage);
        $field.after($errorSpan);
    }

    function showFieldError(fieldName, errorMessage) {
        const $field = $(`[name="${fieldName}"], [id="${fieldName}"]`).first();
        if (!$field.length) return;
        $field.addClass('is-invalid');
        let $errorSpan = $field.siblings('.invalid-feedback, .text-danger').first();
        if (!$errorSpan.length) {
            $errorSpan = $(`span[data-valmsg-for="${fieldName}"]`);
        }
        if (!$errorSpan.length) {
            $errorSpan = $('<span class="text-danger field-validation-error"></span>');
            $field.after($errorSpan);
        }
        $errorSpan.text(errorMessage).show();
    }

    // --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–ª–µ–π ---
    function highlightErrorFields(errors) {
        const displayNameToName = {
            '–§–ò–û': 'FullName',
            '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è': 'Birthday',
            '–û–ø–µ–∫—É–Ω': 'Capable.Guardian',
            '–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞': 'Capable.CourtDecision',
            '–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ–∫—É–Ω–∞': 'Capable.GuardianOrderAppointment',
            '–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': 'MedicalHistory.Resolution',
            '–ù–æ–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª–µ–∑–Ω–∏': 'MedicalHistory.NumberDocument',
            '–¢–∏–ø –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏': 'MedicalHistory.HospitalizationType',
            '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ': 'CitizenshipInfo.Citizenship',
            '–°–ø–∏—Å–æ–∫ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤': 'CitizenshipInfo.Citizenships',
            '–ò–º–µ—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã': 'Documents',
            '–°–ù–ò–õ–°': 'Documents[2].Number',
            '–ü–æ–ª–∏—Å –û–ú–°': 'Documents[1].Number',
            '–ü–∞—Å–ø–æ—Ä—Ç': 'Documents[0].Number',
            '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è': 'MedicalHistory.NumberDepartment',
            '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è': 'MedicalHistory.DateOfReceipt',
            '–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏': 'Pension.DisabilityGroup',
            '–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞': 'Pension.PensionStartDateTime',
            '–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ–Ω—Å–∏–∏': 'Pension.PensionAddress',
            '–§–∏–ª–∏–∞–ª –°–§–†': 'Pension.SfrBranch',
            '–û—Ç–¥–µ–ª–µ–Ω–∏–µ –°–§–†': 'Pension.SfrDepartment',
            '–†–°–î': 'Pension.Rsd'
        };

        errors.forEach(function(error) {
            console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', error);
            
            // 1. –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
            for (const [display, name] of Object.entries(displayNameToName)) {
                if (error.includes(display)) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: "${display}" -> "${name}"`);
                    
                    // –ò—â–µ–º –ø–æ–ª–µ –ø–æ –∏–º–µ–Ω–∏
                    var $field = null;
                    
                    if (name === 'FullName') {
                        $field = $('input[name="FullName"]');
                    } else if (name === 'Birthday') {
                        $field = $('input[name="Birthday"]');
                    } else if (name === 'MedicalHistory.HospitalizationType') {
                        $field = $('select[name="MedicalHistory.HospitalizationType"]');
                    } else if (name === 'MedicalHistory.NumberDepartment') {
                        $field = $('input[name="MedicalHistory.NumberDepartment"]');
                    } else if (name === 'MedicalHistory.Resolution') {
                        $field = $('input[name="MedicalHistory.Resolution"]');
                    } else if (name === 'MedicalHistory.NumberDocument') {
                        $field = $('input[name="MedicalHistory.NumberDocument"]');
                    } else if (name === 'MedicalHistory.DateOfReceipt') {
                        $field = $('input[name="MedicalHistory.DateOfReceipt"]');
                    } else if (name === 'CitizenshipInfo.Citizenship') {
                        $field = $('input[name="CitizenshipInfo.Citizenship"]').closest('.btn-group');
                    } else if (name === 'Capable.Guardian') {
                        $field = $('input[name="Capable.Guardian"]');
                    } else if (name === 'Capable.CourtDecision') {
                        $field = $('input[name="Capable.CourtDecision"]');
                    } else if (name === 'Capable.GuardianOrderAppointment') {
                        $field = $('input[name="Capable.GuardianOrderAppointment"]');
                    } else if (name === 'Pension.DisabilityGroup') {
                        $field = $('select[name="Pension.DisabilityGroup"]');
                    } else if (name === 'Pension.PensionStartDateTime') {
                        $field = $('input[name="Pension.PensionStartDateTime"]');
                    } else if (name === 'Pension.PensionAddress') {
                        $field = $('select[name="Pension.PensionAddress"]');
                    } else if (name === 'Pension.SfrBranch') {
                        $field = $('input[name="Pension.SfrBranch"]');
                    } else if (name === 'Pension.SfrDepartment') {
                        $field = $('input[name="Pension.SfrDepartment"]');
                    } else if (name === 'Pension.Rsd') {
                        $field = $('input[name="Pension.Rsd"]');
                    }
                    
                    if ($field && $field.length > 0) {
                        $field.addClass('is-invalid');
                        addFieldErrorMessage($field, error);
                        console.log(`‚úÖ –ü–æ–¥—Å–≤–µ—á–µ–Ω–æ –ø–æ–ª–µ: ${name}`);
                    } else {
                        console.log(`‚ùå –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${name}`);
                    }
                    return;
                }
            }
            
            // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            if (error.includes('–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')) {
                const $field = $('input[name="FullName"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')) {
                const $field = $('input[name="Birthday"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–¢–∏–ø –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')) {
                const $field = $('select[name="MedicalHistory.HospitalizationType"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è')) {
                const $field = $('input[name="MedicalHistory.NumberDepartment"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ')) {
                const $field = $('input[name="MedicalHistory.Resolution"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–æ–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª–µ–∑–Ω–∏')) {
                const $field = $('input[name="MedicalHistory.NumberDocument"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è')) {
                const $field = $('input[name="MedicalHistory.DateOfReceipt"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')) {
                const $field = $('input[name="CitizenshipInfo.Citizenship"]').closest('.btn-group');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–û–ø–µ–∫—É–Ω')) {
                const $field = $('input[name="Capable.Guardian"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞')) {
                const $field = $('input[name="Capable.CourtDecision"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ–∫—É–Ω–∞')) {
                const $field = $('input[name="Capable.GuardianOrderAppointment"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏')) {
                const $field = $('select[name="Pension.DisabilityGroup"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞')) {
                const $field = $('input[name="Pension.PensionStartDateTime"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ–Ω—Å–∏–∏')) {
                const $field = $('select[name="Pension.PensionAddress"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–§–∏–ª–∏–∞–ª –°–§–†')) {
                const $field = $('input[name="Pension.SfrBranch"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–û—Ç–¥–µ–ª–µ–Ω–∏–µ –°–§–†')) {
                const $field = $('input[name="Pension.SfrDepartment"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–†–°–î')) {
                const $field = $('input[name="Pension.Rsd"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (error.includes('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')) {
                const $field = $('input[name="Birthday"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
                const $field = $('input[name="MedicalHistory.DateOfReceipt"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
                const $field = $('input[name="MedicalHistory.NumberDocument"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30')) {
                const $field = $('input[name="MedicalHistory.NumberDepartment"]');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞')) {
                const $field = $('input[name="CitizenshipInfo.Citizenship"]').closest('.btn-group');
                $field.addClass('is-invalid');
                addFieldErrorMessage($field, error);
                return;
            }
            
            if (error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏')) {
                $('input[name^="Capable"]').addClass('is-invalid').each(function() {
                    addFieldErrorMessage($(this), error);
                });
                return;
            }
            
            if (error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ–Ω—Å–∏–∏')) {
                $('input[name^="Pension"], select[name^="Pension"]').addClass('is-invalid').each(function() {
                    addFieldErrorMessage($(this), error);
                });
                return;
            }
            
            // 4. Fallback –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if (error.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || error.includes('–î–æ–∫—É–º–µ–Ω—Ç') || error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
                $('input[name^="Documents"]').addClass('is-invalid').each(function() {
                    addFieldErrorMessage($(this), error);
                });
                return;
            }
            
            // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞
            if (error.includes('–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å') || error.includes('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ')) {
                // –≠—Ç–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                $('input[name^="Documents"]').addClass('is-invalid').each(function() {
                    addFieldErrorMessage($(this), error);
                });
                return;
            }
            
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É: "${error}"`);
        });
    }

    function showValidationErrors(errors) {
        clearValidationErrors();
        if (!Array.isArray(errors) || errors.length === 0) return;
        // SweetAlert2
        let errorHtml = '<div style="text-align: left;">';
        errorHtml += '<h6 style="color: #dc2626; margin-bottom: 1rem;"><i class="fa fa-exclamation-triangle"></i> –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h6>';
        errorHtml += '<ul style="margin: 0; padding-left: 1.5rem; color: #991b1b;">';
        errors.forEach(function(error) {
            errorHtml += '<li style="margin-bottom: 0.5rem;">' + error + '</li>';
        });
        errorHtml += '</ul></div>';
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                html: errorHtml,
                icon: 'error',
                confirmButtonText: '–ü–æ–Ω—è—Ç–Ω–æ',
                confirmButtonColor: '#dc2626',
                width: '600px',
                customClass: {
                    popup: 'validation-error-popup',
                    htmlContainer: 'validation-error-content'
                }
            });
        } else {
            console.error('SweetAlert2 –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        highlightErrorFields(errors);
    }

    // --- –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
    function testAllFormFields() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã');
        const fieldTests = [
            { name: 'FullName', selector: 'input[name="FullName"]' },
            { name: 'Birthday', selector: 'input[name="Birthday"]' },
            { name: 'MedicalHistory.NumberDocument', selector: 'input[name="MedicalHistory.NumberDocument"]' },
            { name: 'MedicalHistory.NumberDepartment', selector: 'input[name="MedicalHistory.NumberDepartment"]' },
            { name: 'MedicalHistory.HospitalizationType', selector: 'select[name="MedicalHistory.HospitalizationType"]' },
            { name: 'Documents[0].Number (–ü–∞—Å–ø–æ—Ä—Ç)', selector: 'input[name="Documents[0].Number"]' },
            { name: 'Documents[1].Number (–ü–æ–ª–∏—Å –û–ú–°)', selector: 'input[name="Documents[1].Number"]' },
            { name: 'Documents[2].Number (–°–ù–ò–õ–°)', selector: 'input[name="Documents[2].Number"]' },
            { name: 'CitizenshipInfo.Citizenship', selector: 'input[name="CitizenshipInfo.Citizenship"]' },
            { name: 'Capable.CourtDecision', selector: 'input[name="Capable.CourtDecision"]' },
            { name: 'Pension.DisabilityGroup', selector: 'select[name="Pension.DisabilityGroup"]' }
        ];
        fieldTests.forEach(function(test) {
            const $field = $(test.selector);
            const found = $field.length > 0;
            console.log(`${found ? '‚úÖ' : '‚ùå'} ${test.name}: ${found ? '–Ω–∞–π–¥–µ–Ω–æ' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
            if (found) {
                console.log(`   - –¢–∏–ø: ${$field.prop('tagName')}`);
                console.log(`   - –ö–ª–∞—Å—Å—ã: ${$field.attr('class') || '–Ω–µ—Ç'}`);
                console.log(`   - –ó–Ω–∞—á–µ–Ω–∏–µ: "${$field.val() || '–ø—É—Å—Ç–æ–µ'}"`);
            }
        });
    }

    // --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ ---
    function initErrorClearing() {
        $(document).on('input focus', '.form-control.is-invalid, .form-select.is-invalid', function() {
            $(this).removeClass('is-invalid');
            $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
        });
        $(document).on('change', '.form-select.is-invalid', function() {
            $(this).removeClass('is-invalid');
            $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
        });
    }

    // --- –≠–∫—Å–ø–æ—Ä—Ç ---
    global.AddPatientFormValidation = {
        clearValidationErrors,
        showValidationErrors,
        highlightErrorFields,
        addFieldErrorMessage,
        showFieldError,
        testAllFormFields,
        initErrorClearing
    };

    // --- –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    $(document).ready(function() {
        initErrorClearing();
    });

})(window);