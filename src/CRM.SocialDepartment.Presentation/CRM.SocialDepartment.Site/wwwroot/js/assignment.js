/*
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (assignments).
    –í–µ—Ä—Å–∏—è: 1.0.0
*/

console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫:');
console.log('jQuery:', typeof $ !== 'undefined' ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('DataTables:', typeof $.fn.DataTable !== 'undefined' ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
if (typeof $.fn.DataTable !== 'undefined') {
    console.log('DataTables –≤–µ—Ä—Å–∏—è:', $.fn.dataTable.version);
}

function showMessage(type, title, message) {
    if (window.malomalsky?.message?.[type] && typeof window.malomalsky.message[type] === 'function') {
        try {
            malomalsky.message[type](title, message);
            return;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ malomalsky.message:', error);
        }
    }

    if (window.Swal) {
        const config = {
            title: title,
            text: message,
            confirmButtonText: 'OK'
        };

        switch (type) {
            case 'success': config.icon = 'success'; break;
            case 'error': config.icon = 'error'; break;
            case 'warning': config.icon = 'warning'; break;
            case 'info': config.icon = 'info'; break;
        }

        Swal.fire(config);
    } else {
        console.log(title + ': ' + message);
    }
}

const ASSIGNMENT_API = {
    listActive: '/api/assignments/active',   // POST
    createOrUpdate: '/api/assignments',      // POST (Create/Update)
    delete: (id) => `/api/assignments/${id}`,// DELETE
    modalCreate: '/Assignment/modal/create', // GET (PartialView)
    modalEdit: (id) => `/Assignment/modal/edit?id=${id}` // GET (PartialView)
};


const COLUMNS_MAP = {
    id: 'id',
    acceptDate: 'acceptDate',                     // –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–∫–∏ –æ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏—è
    departmentNumber: 'departmentNumber',         // –ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è
    description: 'description',                   // –û–ø–∏—Å–∞–Ω–∏–µ
    forwardDate: 'forwardDate',                   // –î–∞—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    forwardDepartment: 'forwardDepartment',       // –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    name: 'name',                                 // –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –Ω–∞ workDone)
    departmentForwardDate: 'departmentForwardDate', // –î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
    assignee: 'assignee',                         // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    note: 'note',                                 // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
    createdDate: 'createdDate',                   // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    patient: 'patient'                            // –ü–∞—Ü–∏–µ–Ω—Ç (—Å—Ç—Ä–æ–∫–∞ –§–ò–û –∏–ª–∏ –∫–æ–¥)
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateConnectionStatus() {
    const isConnected = true; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    $('#connection-status').html(
        isConnected
            ? '<i class="fa fa-circle text-success"></i><small>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</small>'
            : '<i class="fa fa-circle text-warning"></i><small>Polling —Ä–µ–∂–∏–º</small>'
    );
}

function updateLastUpdateTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    $('#last-update').text(timeString);
}

function updateRecordsCount(count) {
    $('#records-badge').text(count || 0);
}

let assignmentAutoRefreshInterval;
let assignmentSubmitInProgress = false;
function startAssignmentAutoRefresh() {
    if ($('#auto-refresh-setting').is(':checked') && window.assignmentDataTable) {
        stopAssignmentAutoRefresh();
        assignmentAutoRefreshInterval = setInterval(() => {
            window.assignmentDataTable.ajax.reload(null, false);
            updateLastUpdateTime();
        }, 30000);
    }
}

function stopAssignmentAutoRefresh() {
    if (assignmentAutoRefreshInterval) {
        clearInterval(assignmentAutoRefreshInterval);
        assignmentAutoRefreshInterval = null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function loadAssignmentData() {
    if (window.assignmentDataTable && $.fn.DataTable.isDataTable('#table')) {
        ajaxReloadCounter++;
        console.log(`üîÑ –í—ã–∑–æ–≤ ajax.reload #${ajaxReloadCounter}`);
        window.assignmentDataTable.ajax.reload(null, false);
    }
}


function loadAssignmentSettings() {
    const savedSettings = localStorage.getItem('assignmentTableSettings');
    if (savedSettings) {
        try {
            const settings = JSON.parse(savedSettings);
            $('#page-length-setting').val(settings.pageLength || '50');
            $('#auto-refresh-setting').prop('checked', settings.autoRefresh !== false);
            $('#compact-mode-setting').prop('checked', settings.compactMode || false);
            $('#save-state-setting').prop('checked', settings.saveState !== false);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        }
    }
}

function openCreateAssignment(patientId) {
    const url = patientId ? (ASSIGNMENT_API.modalCreate + '?patientId=' + encodeURIComponent(patientId))
        : ASSIGNMENT_API.modalCreate;

    $.get(url, function (html) {
        $('#form-modal .modal-title').text('–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É');
        $('#form-modal .modal-body').html(html);
        $('#form-modal').modal('show');
        if (window.AddAssignmentFormValidation) {
            AddAssignmentFormValidation.initErrorClearing();
        }
    }).fail(function () {
        showMessage('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    });
}

function openEditAssignment(assignmentId) {
    $.get(ASSIGNMENT_API.modalEdit(assignmentId), function (html) {
        $('#form-modal .modal-title').text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É');
        $('#form-modal .modal-body').html(html);
        $('#form-modal').modal('show');
        if (window.AddAssignmentFormValidation) {
            AddAssignmentFormValidation.initErrorClearing();
        }
    }).fail(function () {
        showMessage('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function deleteAssignment(assignmentId) {
    Swal.fire({
        title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
        text: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: '–î–∞, —É–¥–∞–ª–∏—Ç—å',
        cancelButtonText: '–û—Ç–º–µ–Ω–∞'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: ASSIGNMENT_API.delete(assignmentId),
                type: 'DELETE',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).done(function (response, status, xhr) {
                // –î–ª—è 204 No Content –Ω–µ—Ç —Ç–µ–ª–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                showMessage('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.');
                if (window.assignmentDataTable) {
                    window.assignmentDataTable.ajax.reload();
                }
            }).fail(function (xhr) {
                let msg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.';
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞ API
                    const json = xhr.responseJSON || JSON.parse(xhr.responseText);
                    msg = json?.message || json?.Message || json?.error || msg;
                    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ApiResponse<T>
                    if (json && json.Success === false && json.Message) {
                        msg = json.Message;
                    }
                } catch (_) { /* ignore parse errors */ }
                showMessage('error', '–û—à–∏–±–∫–∞', msg);
            });
        }
    });
}

// –°—á–µ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
let initializationCounter = 0;
let dataSrcCounter = 0;
let ajaxRequestCounter = 0;
let initCompleteCounter = 0;
let formSubmitCounter = 0;
let documentReadyCounter = 0;

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
let isFormSubmitting = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable –¥–ª—è –∑–∞–¥–∞—á
function initializeAssignmentDataTable() {
    initializationCounter++;
    console.log(`üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DataTable (–ø–æ–ø—ã—Ç–∫–∞ #${initializationCounter})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ DOM
    const $table = $('#table');
    console.log('üìã –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM:', $table.length > 0);
    if ($table.length === 0) {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å id="table" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
        return null;
    }
    
    if ($.fn.DataTable.isDataTable('#table')) {
        console.log('üîÑ DataTable —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—É—é');
        $('#table').DataTable().destroy();
        $('#table').empty();
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const url = ASSIGNMENT_API.listActive;
    console.log('üì° URL –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–∞:', url);

    try {
        const dataTable = $('#table').DataTable({
            processing: true,
            serverSide: true,
            rowId: COLUMNS_MAP.id,
            ajax: {
                url: url,
                type: 'POST',
                dataType: 'json',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                data: function(d) {
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ DataTable:', d);
                    return d;
                },
                beforeSend: function(xhr) {
                    ajaxRequestCounter++;
                    console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å #${ajaxRequestCounter} –Ω–∞:`, url);
                    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', this.data);
                },
                dataSrc: function (json) {
                    dataSrcCounter++;
                    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–≤—ã–∑–æ–≤ #${dataSrcCounter}):`, json);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ json —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
                    if (!json || typeof json !== 'object') {
                        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                        return [];
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                    if (json.error) {
                        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', json.error);
                        showMessage('error', '–û—à–∏–±–∫–∞', json.error);
                        return [];
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    if (json.data && Array.isArray(json.data)) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${json.data.length} –∑–∞–ø–∏—Å–µ–π (–≤—ã–∑–æ–≤ #${dataSrcCounter})`);
                        updateRecordsCount(json.recordsTotal || 0);
                        updateLastUpdateTime();
                        return json.data;
                    }
                    
                    console.log(`üì≠ –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–≤—ã–∑–æ–≤ #${dataSrcCounter})`);
                    updateRecordsCount(0);
                    updateLastUpdateTime();
                    return [];
                },
                error: function (xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞:', {xhr, status, error});
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    if (status !== 'abort') {
                        showMessage('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á');
                    }
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ DataTable
                    return [];
                }
            },
            columns: [
                // –î–µ–π—Å—Ç–≤–∏—è (–ø—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
                {
                    data: COLUMNS_MAP.id,
                    title: '–î–µ–π—Å—Ç–≤–∏—è',
                    orderable: false,
                    searchable: false,
                    className: 'text-center',
                    render: function (data, type, row) {
                        return `
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm btn-view-assignment" data-assignment-id="${data}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                    <i class="fa fa-eye"></i>
                                </button>
                                <button type="button" class="btn btn-outline-warning btn-sm btn-edit-assignment" data-assignment-id="${data}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm btn-delete-assignment" data-assignment-id="${data}" title="–£–¥–∞–ª–∏—Ç—å">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        `;
                    }
                },

                // –°—Ç–æ–ª–±—Ü—ã –ø–æ –í–∞—à–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                { data: COLUMNS_MAP.id, title: 'ID', visible: false, searchable: false },

                { data: COLUMNS_MAP.acceptDate, title: '–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–∫–∏ –æ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏—è', className: 'text-center',
                    render: function (d) { return formatDate(d); } },

                { data: COLUMNS_MAP.departmentNumber, title: '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è', className: 'text-center' },

                { data: COLUMNS_MAP.description, title: '–û–ø–∏—Å–∞–Ω–∏–µ', className: 'fw-medium' },

                { data: COLUMNS_MAP.forwardDate, title: '–î–∞—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', className: 'text-center',
                    render: function (d) { return formatDate(d); } },

                { data: COLUMNS_MAP.forwardDepartment, title: '–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã', className: 'text-center' },

                { data: COLUMNS_MAP.name, title: '–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ', className: 'fw-medium' },

                { data: COLUMNS_MAP.departmentForwardDate, title: '–î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ', className: 'text-center',
                    render: function (d) { return formatDate(d); } },

                { data: COLUMNS_MAP.assignee, title: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', className: 'text-center' },

                { data: COLUMNS_MAP.note, title: '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', className: 'fw-medium' },

                { data: COLUMNS_MAP.createdDate, title: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', className: 'text-center',
                    render: function (d) { return formatDate(d); } },

                { data: COLUMNS_MAP.patient, title: '–ü–∞—Ü–∏–µ–Ω—Ç', className: 'fw-medium' }
            ],
            order: [[11, 'desc']], // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏" (–∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ)
            pageLength: 100,
            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, '–í—Å–µ']],
            language: {
                url: '/lib/datatables.net-bs5/language/ru.json'
            },
            dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                '<"row"<"col-sm-12"tr>>' +
                '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
            responsive: true,
            initComplete: function () {
                initCompleteCounter++;
                console.log(`‚úÖ DataTable –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–≤—ã–∑–æ–≤ #${initCompleteCounter})`);
                console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${this.api().page.info().recordsTotal}`);
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if (this.api().page.info().recordsTotal === 0) {
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                    this.api().ajax.reload(null, false);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
                this.api().on('search.dt', function () {
                    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ');
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                this.api().on('xhr.dt', function () {
                    console.log('üìä XHR –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
                });
            }
        });

        window.assignmentDataTable = dataTable;
        console.log('üíæ DataTable —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ window.assignmentDataTable');
        console.log('üîç DataTable –æ–±—ä–µ–∫—Ç:', dataTable);
        return dataTable;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataTable:', error);
        showMessage('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
        return null;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã dd.MM.yyyy
function formatDate(date) {
    if (!date) return '';
    const d = new Date(date);
    if (isNaN(d.getTime())) return '';
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    return `${day}.${month}.${year}`;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ dd.MM.yyyy –≤ ISO (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
function formatDateForInput(dateString) {
    if (!dateString) return '';
    const parts = dateString.split('.');
    if (parts.length !== 3) return '';
    const day = parts[0];
    const month = parts[1];
    const year = parts[2];
    return `${year}-${month}-${day}`;
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
$(document).ready(function () {
    documentReadyCounter++;
    console.log(`üöÄ Document ready: assignment.js (–ø–æ–ø—ã—Ç–∫–∞ #${documentReadyCounter})`);

    if (typeof $ === 'undefined') {
        console.error('jQuery –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }
    if (typeof $.fn.DataTable === 'undefined') {
        console.error('DataTables –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    loadAssignmentSettings();
    updateConnectionStatus();
    updateLastUpdateTime();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataTable');
    const dataTableResult = initializeAssignmentDataTable();
    if (dataTableResult) {
        console.log('‚úÖ DataTable —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        startAssignmentAutoRefresh();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(function() {
            if (window.assignmentDataTable && window.assignmentDataTable.page.info().recordsTotal === 0) {
                console.log('üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º...');
                window.assignmentDataTable.ajax.reload(null, false);
            }
        }, 500);
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DataTable');
    }

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
    $(document).off('click.assignment', '#add-assignment').on('click.assignment', '#add-assignment', function (e) {
        e.preventDefault();
        openCreateAssignment();
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    $(document).off('submit.assignment', '#create-assignment-form').on('submit.assignment', '#create-assignment-form', function (e) {
        e.preventDefault();
        formSubmitCounter++;
        console.log(`üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤—ã–∑–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ #${formSubmitCounter})`);

        const $form = $(this);
        const $submitBtn = $("#form-modal").find(':submit');
        
        // –°—Ç—Ä–æ–≥–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (isFormSubmitting || $submitBtn.attr('disabled') === 'disabled') {
            console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        isFormSubmitting = true;

        const url = $form.attr('action');
        
        const formData = new FormData($form[0]);
        const data = new URLSearchParams();
        for (const pair of formData.entries()) {
            data.append(pair[0], pair[1]);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const requestId = 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        console.log(`üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞: ${requestId}`);
        
        const headers = {
            "CSRF-TOKEN": $form.find('input[name="__RequestVerificationToken"]').val(),
            "X-Request-ID": requestId
        };

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        if (window.AddAssignmentFormValidation) {
            AddAssignmentFormValidation.clearValidationErrors();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        $.ajax({
            url: url,
            type: 'POST',
            data: data.toString(),
            contentType: 'application/x-www-form-urlencoded',
            headers: headers,
            beforeSend: function () {
                console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (ID: ${requestId})`);
                $("#form-modal").find(':submit').attr('disabled', true);
                $("#form-modal").find(':submit').html('<div class="spinner-border spinner-border-sm" role="status"></div>');
            },
            success: function (response) {
                console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (ID –∑–∞–ø—Ä–æ—Å–∞: ${requestId}), –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, response);
                $('#form-modal').modal('hide');
                showMessage('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
                isFormSubmitting = false;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                if (window.assignmentDataTable) {
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
                    window.assignmentDataTable.ajax.reload(null, false);
                }
            },
            error: function (xhr) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (ID –∑–∞–ø—Ä–æ—Å–∞: ${requestId}):`, xhr);
                $("#form-modal").find(':submit').html('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
                $("#form-modal").find(':submit').attr('disabled', false);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                isFormSubmitting = false;

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (400)
                if (xhr.status === 400) {
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response && response.Data && response.Data.Errors && Array.isArray(response.Data.Errors)) {
                            if (window.AddAssignmentFormValidation) {
                                AddAssignmentFormValidation.showValidationErrors(response.Data.Errors);
                                return;
                            }
                        }
                    } catch (parseError) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏:', parseError);
                    }
                }

                showMessage('error', '–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
            }
        });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É (PATCH)
    $(document).off('submit.assignment', '#edit-assignment-form').on('submit.assignment', '#edit-assignment-form', function (e) {
        e.preventDefault();

        const $form = $(this);
        const url = $form.attr('action'); // /api/assignments/{id}

        if (window.AddAssignmentFormValidation) {
            AddAssignmentFormValidation.clearValidationErrors();
        }

        const formData = new FormData($form[0]);
        const data = new URLSearchParams();
        for (const pair of formData.entries()) {
            data.append(pair[0], pair[1]);
        }

        const headers = {
            "CSRF-TOKEN": $form.find('input[name="__RequestVerificationToken"]').val()
        };

        $.ajax({
            url: url,
            type: 'PATCH',
            data: data.toString(),
            contentType: 'application/x-www-form-urlencoded',
            headers: headers,
            beforeSend: function () {
                $("#form-modal").find(':submit').attr('disabled', true).html('<div class="spinner-border spinner-border-sm" role="status"></div>');
            },
            success: function () {
                $('#form-modal').modal('hide');
                showMessage('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (window.assignmentDataTable) {
                    window.assignmentDataTable.ajax.reload(null, false);
                }
            },
            error: function (xhr) {
                $("#form-modal").find(':submit').html('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å').attr('disabled', false);

                if (xhr.status === 400) {
                    try {
                        const response = JSON.parse(xhr.responseText);

                        if (Array.isArray(response)) {
                            AddAssignmentFormValidation.showValidationErrors(response);
                            return;
                        }
                        if (response && response.Data && Array.isArray(response.Data.Errors)) {
                            AddAssignmentFormValidation.showValidationErrors(response.Data.Errors);
                            return;
                        }
                    } catch (parseError) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏:', parseError);
                    }
                }

                const errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏';
                showMessage('error', '–û—à–∏–±–∫–∞', errorMessage);
            }
        });
    });

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
    $(document).on('input focus', '.form-control.is-invalid, .form-select.is-invalid', function () {
        $(this).removeClass('is-invalid');
        $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
    });
    $(document).on('change', '.form-select.is-invalid', function () {
        $(this).removeClass('is-invalid');
        $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
    });

    // –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    $(document).on('click', '#reload-data', function (e) {
        e.preventDefault();
        if (window.assignmentDataTable) {
            window.assignmentDataTable.ajax.reload(function () {
                updateLastUpdateTime();
            }, false);
        }
    });

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"
    $(document).on('click', '#fullscreen-toggle', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const $container = $('.modern-datatable-container');
        const $icon = $(this).find('i');

        if (!$container.hasClass('fullscreen-mode')) {
            $container.addClass('fullscreen-mode');
            $('body').addClass('datatable-fullscreen');
            $icon.removeClass('fa-expand').addClass('fa-compress');

            $container.css({
                'position': 'fixed',
                'top': '0',
                'left': '0',
                'right': '0',
                'bottom': '0',
                'z-index': '1040',
                'background': '#fff'
            });

            if (window.assignmentDataTable) {
                setTimeout(function () {
                    window.assignmentDataTable.columns.adjust().draw();
                }, 200);
            }
        } else {
            $container.removeClass('fullscreen-mode');
            $('body').removeClass('datatable-fullscreen');
            $icon.removeClass('fa-compress').addClass('fa-expand');

            $container.css({
                'position': '',
                'top': '',
                'left': '',
                'right': '',
                'bottom': '',
                'z-index': '',
                'background': ''
            });

            if (window.assignmentDataTable) {
                setTimeout(function () {
                    window.assignmentDataTable.columns.adjust();
                    window.assignmentDataTable.draw();
                }, 300);
            }
        }
    });

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ç—Ä–æ–∫–µ
    $(document).on('click', '.btn-view-assignment', function (e) {
        e.preventDefault();
        const assignmentId = $(this).data('assignment-id');
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
        // window.location.href = `/Assignment/Card/${assignmentId}`;
        showMessage('info', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    });

    $(document).on('click', '.btn-edit-assignment', function (e) {
        e.preventDefault();
        const assignmentId = $(this).data('assignment-id');
        openEditAssignment(assignmentId);
    });

    $(document).on('click', '.btn-delete-assignment', function (e) {
        e.preventDefault();
        const assignmentId = $(this).data('assignment-id');
        deleteAssignment(assignmentId);
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    $('#apply-settings').on('click', function () {
        const pageLength = $('#page-length-setting').val();
        const autoRefresh = $('#auto-refresh-setting').is(':checked');
        const compactMode = $('#compact-mode-setting').is(':checked');

        if (window.assignmentDataTable) {
            $('#table').toggleClass('table-sm', compactMode);

            const settings = {
                pageLength: pageLength,
                autoRefresh: autoRefresh,
                compactMode: compactMode
            };
            localStorage.setItem('assignmentTableSettings', JSON.stringify(settings));

            window.assignmentDataTable.page.len(pageLength === '-1' ? -1 : parseInt(pageLength)).draw();

            if (autoRefresh) {
                startAssignmentAutoRefresh();
            } else {
                stopAssignmentAutoRefresh();
            }
        }

        $('#table-settings-modal').modal('hide');
    });

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    $(document).on('keydown', function (e) {
        if (!$(e.target).is('input, textarea, select')) {
            if (e.ctrlKey && e.key === 'n') {
                e.preventDefault();
                $('#add-assignment').click();
            } else if (e.key === 'F5') {
                e.preventDefault();
                $('#reload-data').click();
            } else if (e.key === 'F11') {
                e.preventDefault();
                $('#fullscreen-toggle').click();
            } else if (e.key === 'Escape' && $('.modern-datatable-container').hasClass('fullscreen-mode')) {
                e.preventDefault();
                $('#fullscreen-toggle').click();
            }
        }
    });

    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìä –°—á–µ—Ç—á–∏–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
    console.log(`   - Document ready: ${documentReadyCounter}`);
    console.log(`   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π DataTable: ${initializationCounter}`);
    console.log(`   - AJAX –∑–∞–ø—Ä–æ—Å–æ–≤: ${ajaxRequestCounter}`);
    console.log(`   - –í—ã–∑–æ–≤–æ–≤ dataSrc: ${dataSrcCounter}`);
    console.log(`   - –í—ã–∑–æ–≤–æ–≤ initComplete: ${initCompleteCounter}`);
    console.log(`   - –û—Ç–ø—Ä–∞–≤–æ–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è: ${formSubmitCounter}`);
    console.log('DataTable instance:', window.assignmentDataTable);
    console.log('AJAX URL:', window.assignmentDataTable?.ajax?.url());
});

