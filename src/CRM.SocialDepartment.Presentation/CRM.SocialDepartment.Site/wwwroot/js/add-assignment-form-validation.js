// add-assignment-form-validation.js
// –ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º "–°–æ–∑–¥–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ" –∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"

(function (global) {
    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    function clearValidationErrors() {
        $('.form-control, .form-select, .btn-group').removeClass('is-invalid');
        $('.invalid-feedback, .text-danger.field-validation-error').remove();
        $('.validation-errors').remove();
        $('.alert-danger').remove();
    }

    function addFieldErrorMessage($field, errorMessage) {
        $field.siblings('.invalid-feedback, .text-danger.field-validation-error').remove();

        const $errorSpan = $('<span class="text-danger field-validation-error"></span>');
        $errorSpan.text(errorMessage);

        if ($field.hasClass('btn-group')) {
            $field.after($errorSpan);
        } else {
            $field.after($errorSpan);
        }
    }

    function showFieldError(fieldName, errorMessage) {
        let $field = $(`[name="${fieldName}"], [id="${fieldName}"]`).first();

        if (!$field.length && fieldName === 'ForwardDepartment') {
            $field = $(`input[name="${fieldName}"]`).closest('.btn-group');
        }

        if (!$field.length) return;

        $field.addClass('is-invalid');

        let $errorSpan = $field.siblings('.invalid-feedback, .text-danger').first();
        if (!$errorSpan.length) {
            $errorSpan = $(`span[data-valmsg-for="${fieldName}"]`);
        }
        if (!$errorSpan.length) {
            addFieldErrorMessage($field, errorMessage);
        } else {
            $errorSpan.text(errorMessage).show();
        }
    }

    function highlightErrorFields(errors) {
        const displayNameToName = {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': 'Name',
            '–û–ø–∏—Å–∞–Ω–∏–µ': 'Description',
            '–°—Ä–æ–∫': 'DueDate',
            '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': 'Assignee',
            '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è': 'DepartmentNumber',
            '–ö—É–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ': 'ForwardDepartment',
            '–ö–æ–º—É –ø–µ—Ä–µ–¥–∞–Ω–æ': 'ForwardDepartment',
            '–ó–∞–º–µ—Ç–∫–∞': 'Note',
            '–ü–∞—Ü–∏–µ–Ω—Ç': 'PatientId',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': 'CreatedDate',
            '–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è': 'AcceptDate',
            '–î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏': 'ForwardDate',
            '–î–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ': 'DepartmentForwardDate'
        };

        errors.forEach(function (error) {
            for (const [display, name] of Object.entries(displayNameToName)) {
                if (error.includes(display)) {
                    let $field = null;

                    switch (name) {
                        case 'Name':
                            $field = $('input[name="Name"]');
                            break;
                        case 'Description':
                            $field = $('textarea[name="Description"]');
                            break;
                        case 'DueDate':
                            $field = $('input[name="DueDate"]');
                            break;
                        case 'Assignee':
                            $field = $('input[name="Assignee"]');
                            break;
                        case 'DepartmentNumber':
                            $field = $('input[name="DepartmentNumber"]');
                            break;
                        case 'ForwardDepartment':
                            $field = $('input[name="ForwardDepartment"]');
                            if (!$field.length) {
                                $field = $('input[name="ForwardDepartment"]').closest('.btn-group');
                            }
                            break;
                        case 'Note':
                            $field = $('textarea[name="Note"]');
                            break;
                        case 'PatientId':
                            $field = $('input[name="PatientId"]');
                            break;
                        case 'CreatedDate':
                            $field = $('input[name="CreatedDate"]');
                            break;
                        case 'AcceptDate':
                            $field = $('input[name="AcceptDate"]');
                            break;
                        case 'ForwardDate':
                            $field = $('input[name="ForwardDate"]');
                            break;
                        case 'DepartmentForwardDate':
                            $field = $('input[name="DepartmentForwardDate"]');
                            break;
                    }

                    if ($field && $field.length) {
                        $field.addClass('is-invalid');
                        addFieldErrorMessage($field, error);
                    }
                    return; 
                }
            }

            if (error.includes('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ') || error.includes('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ')) {
                const $field = $('input[name="Name"]');
                $field.addClass('is-invalid'); addFieldErrorMessage($field, error);
                return;
            }

            if (error.includes('–°—Ä–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω') || error.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫')) {
                const $field = $('input[name="DueDate"]');
                $field.addClass('is-invalid'); addFieldErrorMessage($field, error);
                return;
            }

            if (error.includes('–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è') && (error.includes('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å') || error.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω'))) {
                const $field = $('input[name="DepartmentNumber"]');
                $field.addClass('is-invalid'); addFieldErrorMessage($field, error);
                return;
            }

            if (error.toLowerCase().includes('–ø–∞—Ü–∏–µ–Ω—Ç') && (error.includes('–æ–±—è–∑–∞—Ç–µ–ª') || error.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω'))) {
                const $field = $('input[name="PatientId"]');
                $field.addClass('is-invalid'); addFieldErrorMessage($field, error);
                return;
            }

            if (error.toLowerCase().includes('–¥–∞—Ç–∞') && (error.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç') || error.includes('—Ä–∞–Ω—å—à–µ') || error.includes('–ø–æ–∑–∂–µ'))) {
                const $dates = $('input[name="DueDate"], input[name="CreatedDate"], input[name="AcceptDate"], input[name="ForwardDate"], input[name="DepartmentForwardDate"]');
                $dates.addClass('is-invalid').each(function () { addFieldErrorMessage($(this), error); });
                return;
            }

            const $form = $('#create-assignment-form, #edit-assignment-form').first();
            if ($form.length) {
                const $summary = $('<div class="text-danger field-validation-error validation-errors"></div>');
                $summary.text(error);
                $form.prepend($summary);
            }
        });
    }

    function showValidationErrors(errors) {
        clearValidationErrors();
        if (!Array.isArray(errors) || errors.length === 0) return;

        let errorHtml = '<div style="text-align: left;">';
        errorHtml += '<h6 style="color: #dc2626; margin-bottom: 1rem;"><i class="fa fa-exclamation-triangle"></i> –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h6>';
        errorHtml += '<ul style="margin: 0; padding-left: 1.5rem; color: #991b1b;">';
        errors.forEach(function (error) {
            errorHtml += '<li style="margin-bottom: 0.5rem;">' + error + '</li>';
        });
        errorHtml += '</ul></div>';

        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                html: errorHtml,
                icon: 'error',
                confirmButtonText: '–ü–æ–Ω—è—Ç–Ω–æ',
                confirmButtonColor: '#dc2626',
                width: '600px',
                customClass: {
                    popup: 'validation-error-popup',
                    htmlContainer: 'validation-error-content'
                }
            });
        } else {
            console.error('SweetAlert2 –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        highlightErrorFields(errors);
    }

    function testAllFormFields() {
        const fieldTests = [
            { name: 'Name', selector: 'input[name="Name"]' },
            { name: 'Description', selector: 'textarea[name="Description"]' },
            { name: 'DueDate', selector: 'input[name="DueDate"]' },
            { name: 'Assignee', selector: 'input[name="Assignee"]' },
            { name: 'DepartmentNumber', selector: 'input[name="DepartmentNumber"]' },
            { name: 'ForwardDepartment', selector: 'input[name="ForwardDepartment"]' },
            { name: 'Note', selector: 'textarea[name="Note"]' },
            { name: 'PatientId', selector: 'input[name="PatientId"]' },
            { name: 'CreatedDate', selector: 'input[name="CreatedDate"]' },
            { name: 'AcceptDate', selector: 'input[name="AcceptDate"]' },
            { name: 'ForwardDate', selector: 'input[name="ForwardDate"]' },
            { name: 'DepartmentForwardDate', selector: 'input[name="DepartmentForwardDate"]' }
        ];

        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (Assignments)');
        fieldTests.forEach(function (test) {
            const $field = $(test.selector);
            const found = $field.length > 0;
            console.log(`${found ? '‚úÖ' : '‚ùå'} ${test.name}: ${found ? '–Ω–∞–π–¥–µ–Ω–æ' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
            if (found) {
                console.log(`   - –¢–∏–ø: ${$field.prop('tagName')}`);
                console.log(`   - –ö–ª–∞—Å—Å—ã: ${$field.attr('class') || '–Ω–µ—Ç'}`);
                console.log(`   - –ó–Ω–∞—á–µ–Ω–∏–µ: "${$field.val() || '–ø—É—Å—Ç–æ–µ'}"`);
            }
        });
    }

    function initErrorClearing() {
        $(document).on('input focus', '.form-control.is-invalid, .form-select.is-invalid, .btn-group.is-invalid', function () {
            $(this).removeClass('is-invalid');
            $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
        });
        $(document).on('change', '.form-select.is-invalid', function () {
            $(this).removeClass('is-invalid');
            $(this).siblings('.invalid-feedback, .text-danger.field-validation-error').remove();
        });
    }

    global.AddAssignmentFormValidation = {
        clearValidationErrors,
        showValidationErrors,
        highlightErrorFields,
        addFieldErrorMessage,
        showFieldError,
        testAllFormFields,
        initErrorClearing
    };

    $(document).ready(function () {
        initErrorClearing();
    });

})(window);
